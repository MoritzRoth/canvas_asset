{
	"camera" : 
	{
		"center" : "0.00000 0.00000 -1.00000",
		"eye" : "0.00000 0.00000 0.00000",
		"up" : "0.00000 1.00000 0.00000"
	},
	"general" : 
	{
		"ambientcolor" : "0.30000 0.30000 0.30000",
		"bloom" : false,
		"bloomhdrfeather" : 0.1,
		"bloomhdriterations" : 8,
		"bloomhdrscatter" : 1.619,
		"bloomhdrstrength" : 2.0,
		"bloomhdrthreshold" : 1.0,
		"bloomstrength" : 2.0,
		"bloomthreshold" : 0.64999998,
		"bloomtint" : "1.00000 1.00000 1.00000",
		"camerafade" : true,
		"cameraparallax" : false,
		"cameraparallaxamount" : 0.5,
		"cameraparallaxdelay" : 0.1,
		"cameraparallaxmouseinfluence" : 0.5,
		"camerapreview" : true,
		"camerashake" : false,
		"camerashakeamplitude" : 0.5,
		"camerashakeroughness" : 1.0,
		"camerashakespeed" : 3.0,
		"clearcolor" : "0.00000 0.00000 0.00000",
		"clearenabled" : true,
		"farz" : 10000.0,
		"fov" : 50.0,
		"gravitydirection" : "0.00000 -1.00000 0.00000",
		"gravitystrength" : 1.0,
		"hdr" : false,
		"nearz" : 0.0099999998,
		"orthogonalprojection" : 
		{
			"height" : 1440,
			"width" : 2560
		},
		"perspectiveoverridefov" : 95.0,
		"skylightcolor" : "0.30000 0.30000 0.30000",
		"winddirection" : "0.70700 0.70700 0.00000",
		"windenabled" : false,
		"windstrength" : 1.0,
		"zoom" : 1.0
	},
	"objects" : 
	[
		{
			"castshadow" : false,
			"effects" : 
			[
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 498,
					"name" : "Squiggles",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 499,
							"textures" : [ null, "TestBrush" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 532,
					"name" : "Watercolor",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 533,
							"textures" : [ null, "TestBrushWatercolor" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 668,
					"name" : "Sprinkles",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 779,
							"textures" : [ null, "TestBrushSprinkles" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 670,
					"name" : "Sprinkles Jaggy",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 671,
							"textures" : [ null, "BrushD" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 612,
					"name" : "Circle",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 616,
							"textures" : [ null, "CircleBrush" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 550,
					"name" : "Triangle",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 551,
							"textures" : [ null, "Triangle" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 566,
					"name" : "Square",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 571,
							"textures" : [ null, "Square" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 586,
					"name" : "Star",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 587,
							"textures" : [ null, "Star" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 603,
					"name" : "Gradient",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 604,
							"textures" : [ null, "Gradient" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 546,
					"name" : "Stripes",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 547,
							"textures" : [ null, "Stripes" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 620,
					"name" : "Brush 1",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 621,
							"textures" : [ null, "BrushA" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 680,
					"name" : "Cloud",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1"
							},
							"id" : 681,
							"textures" : [ null, "BrushC" ]
						}
					],
					"visible" : false
				}
			],
			"id" : 536,
			"image" : "models/util/solidlayer.json",
			"name" : "Brush",
			"origin" : 
			{
				"script" : "'use strict';\n\nvar textures = {};\nvar lastTex = [];\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tvar effects = thisScene.getInitialLayerConfig(thisLayer).effects;\n\n\tfor(var i = 0; i < effects.length; i++) {\n\t\tvar effect = thisLayer.getEffect(i);\n\n\t\ttextures[effects[i].name] = effect;\n\t\teffect.visible = false;\n\t\teffect.getMaterial(0).channelMask = new Vec4(0.0, 0.0, 0.0, 0.0);\n\t}\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn value;\n}\n\nexport function refresh() {\n\tvar d = {};\n\n\tvar tex = shared.currentBrush.tex;\n\tfor(var t = 0; t < tex.length; t++) {\n\t\tif(typeof tex[t].images === \"undefined\") {\n\t\t\tbreak;\n\t\t}\n\t\tfor(var i = 0; i < tex[t].images.length; i++) {\n\t\t\tvar im = tex[t].images[i];\n\t\t\tvar v = new Vec3((t + 1) % 2, t % 2, 0);\n\t\t\tif(typeof d[im] === \"undefined\") {\n\t\t\t\td[im] = v;\n\t\t\t}else {\n\t\t\t\td[im] = v.add(d[im]);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(const [key, val] of Object.entries(d)) {\n\t\ttextures[key].visible = true;\n\t\ttextures[key].getMaterial(0).channelMask = val;\n\t}\n\n\tfor(const l of lastTex) {\n\t\tif(typeof d[l] === \"undefined\") {\n\t\t\ttextures[l].visible = false;\n\t\t}\n\t}\n\tlastTex = Object.keys(d);\n}",
				"value" : "1280.00000 720.00000 0.00000"
			},
			"size" : "1024.00000 1024.00000",
			"visible" : false
		},
		{
			"castshadow" : false,
			"dependencies" : [ 16 ],
			"effects" : 
			[
				{
					"file" : "effects/blend/effect.json",
					"id" : 476,
					"name" : "Canvas Copy",
					"passes" : 
					[
						{
							"combos" : 
							{
								"BLENDMODE" : 0
							},
							"constantshadervalues" : 
							{
								"multiply" : 1.0
							},
							"id" : 477,
							"textures" : [ null, "_rt_imageLayerComposite_16_a" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/workshop/2906937488/procedural_noise/effect.json",
					"id" : 643,
					"name" : "Colored Noise",
					"passes" : 
					[
						{
							"combos" : 
							{
								"AB_TYPECOLOR" : 1,
								"BLENDMODE" : 1
							},
							"constantshadervalues" : 
							{
								"Color high" : 
								{
									"script" : "'use strict';\n\nimport * as WEColor from 'WEColor';\n\n/**\n * @param {Vec3} value - for property 'Color high'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\treturn WEColor.hsv2rgb(new Vec3(cb.hue, cb.saturation, cb.value));\n}\n",
									"value" : "1.00000 0.36078 0.36078"
								},
								"Color low" : "1 1 1",
								"Exponent" : 1,
								"Fractal influence" : 0.5,
								"Fractal scaling" : 2.0,
								"Fractals" : 4,
								"Gradient" : 1.0,
								"Offset" : "0.0 0.0",
								"Opacity" : 1,
								"Scale" : "1.0 1.0",
								"Seed" : 0.0,
								"Thresholds" : "0.0 1.0",
								"Thresholds offset" : 0.0,
								"animationspeed" : 1.0,
								"scrollirection" : 0,
								"scrollspeed" : 0.0
							},
							"id" : 645
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/motionblur/effect.json",
					"id" : 785,
					"name" : "Freeze while Painting",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"rate" : 
								{
									"script" : "'use strict';\n\nvar accumulation = 1.;\nvar reset = false;\n\n/**\n * @param {Number} value - for property 'rate'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tvar ret = accumulation;\n\tif(reset) {\n\t\taccumulation = 1.;\n\t\treset = false;\n\t}\n\treturn ret;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\taccumulation = 0.;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\treset = true;\n}\n",
									"value" : 0.80000001
								}
							},
							"id" : 786
						},
						{
							"id" : 37
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/blend/effect.json",
					"id" : 649,
					"name" : "Fabric Pattern",
					"passes" : 
					[
						{
							"combos" : 
							{
								"BLENDMODE" : 0,
								"TRANSFORMREPEAT" : 1,
								"TRANSFORMUV" : 1
							},
							"constantshadervalues" : 
							{
								"blendangle" : 0.0,
								"blendoffset" : "0 0",
								"blendscale" : 1,
								"multiply" : 1.0
							},
							"id" : 650,
							"textures" : [ null, "Faded-Light-Maroon-Texture" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/localcontrast/effect.json",
					"id" : 601,
					"name" : "Sharpen",
					"passes" : 
					[
						{
							"id" : 602
						},
						{
							"constantshadervalues" : 
							{
								"scale" : "1 1"
							},
							"id" : 605
						},
						{
							"combos" : 
							{
								"VERTICAL" : 1
							},
							"constantshadervalues" : 
							{
								"scale" : "1 1"
							},
							"id" : 606
						},
						{
							"constantshadervalues" : 
							{
								"strength" : 1.0
							},
							"id" : 607
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/blur/effect.json",
					"id" : 517,
					"name" : "Blur",
					"passes" : 
					[
						{
							"id" : 519
						},
						{
							"constantshadervalues" : 
							{
								"scale" : "1 1"
							},
							"id" : 521
						},
						{
							"combos" : 
							{
								"VERTICAL" : 1
							},
							"constantshadervalues" : 
							{
								"scale" : "1 1"
							},
							"id" : 523
						},
						{
							"constantshadervalues" : 
							{
								"compositecolor" : "1 1 1"
							},
							"id" : 524
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/tint/effect.json",
					"id" : 725,
					"name" : "Tint with Brush Color",
					"passes" : 
					[
						{
							"combos" : 
							{
								"BLENDMODE" : 28
							},
							"constantshadervalues" : 
							{
								"alpha" : 1.0,
								"color" : 
								{
									"script" : "'use strict';\n\nimport * as WEColor from 'WEColor';\n\n/**\n * @param {Vec3} value - for property 'Color high'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\treturn WEColor.hsv2rgb(new Vec3(cb.hue, cb.saturation, cb.value));\n}\n",
									"value" : "1.00000 0.00000 0.00000"
								}
							},
							"id" : 726
						}
					],
					"visible" : true
				}
			],
			"id" : 288,
			"image" : "models/util/projectlayer.json",
			"name" : "Pattern Texture",
			"origin" : "1280.00000 720.00000 0.00000",
			"parallaxDepth" : "0.00000 0.00000",
			"size" : "2560.00000 1440.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\nvar effects = {};\nvar lastPat = [];\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tfor(var i = 0; i < thisLayer.getEffectCount(); i++) {\n\t\tvar e = thisLayer.getEffect(i);\n\t\teffects[e.name] = i;\n\t\te.visible = false;\n\t}\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn value;\n}\n\nexport function refresh() {\n\tvar p = [];\n\n\tvar pat = shared.currentBrush.pat;\n\tif(typeof pat === \"undefined\") {\n\t\tfor(var i = 0; i < thisLayer.getEffectCount(); i++) {\n\t\t\tthisLayer.getEffect(i).visible = false;\n\t\t}\n\t\tlastPat = p;\n\t\treturn;\n\t}\n\n\tfor(var i = 0; i < pat.length; i++) {\n\t\tvar e = effects[pat[i]];\n\t\tif(typeof e !== \"undefined\") {\n\t\t\tp.push(e);\n\t\t\tthisLayer.getEffect(e).visible = true;\n\t\t}\n\t}\n\n\tfor(const l of lastPat) {\n\t\tif(p.indexOf(l) < 0) {\n\t\t\tthisLayer.getEffect(l).visible = false;\n\t\t}\n\t}\n\n\tlastPat = p;\n}",
				"value" : false
			}
		},
		{
			"castshadow" : false,
			"dependencies" : [ 288, 536 ],
			"effects" : 
			[
				{
					"file" : "effects/blend/effect.json",
					"id" : 772,
					"name" : "",
					"passes" : 
					[
						{
							"combos" : 
							{
								"BLENDMODE" : 0
							},
							"constantshadervalues" : 
							{
								"multiply" : 1
							},
							"id" : 774
						}
					],
					"visible" : true
				},
				{
					"combos" : 
					{
						"ENABLE_BLEND" : 1,
						"ENABLE_LINE_INFLUENCE" : 1,
						"ENABLE_UNDO_CMD" : 1
					},
					"file" : "effects/canvas/effect.json",
					"id" : 160,
					"name" : "",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"cmd2" : 
								{
									"script" : "'use strict';\n\n\n/**\n * @param {Number} value - for property 'Copy Below (Dont, Reset, Noise)'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\t\n\treturn value;\n}\n\n\n/**\n * @param {Number} value - for property 'Copy Below (Reset)'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tif(shared[\"locked\"]) {\n\t\tif(shared[\"reset\"] != \"no\") {\n\t\t\t\n\t\t}\n\t\treturn 0.;\n\t}\n\n\tswitch(shared[\"cmd\"]) {\n\t\tcase \"reset\":\n\t\t\treturn 1.;\n\t\tcase \"undo\":\n\t\t\treturn 2.;\n\t\tcase \"blend\":\n\t\t\treturn 3.;\n\t\tcase \"none\":\n\t\tdefault:\n\t\t\treturn 0.;\n\t}\n}",
									"value" : 1
								},
								"mouseDown" : 
								{
									"script" : "'use strict';\n\nvar lastFrame;\nvar mouseDown;\n\n/**\n * @param {Number} value - for property 'Mouse Down'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tlastFrame = 0;\n\tmouseDown = false;\n\tshared[\"cursorOnUi\"] = false;\n\treturn 0;\n}\n\n/**\n * @param {Vec2} value - for property 'Mouse Down (X = This Frame, Y = Last Frame)'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar vec = new Vec2((mouseDown && !shared[\"cursorOnUi\"] && !shared[\"locked\"]) ? 1 : 0, lastFrame);\n\tlastFrame = vec.x;\n\treturn vec;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tmouseDown = false;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tmouseDown = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tmouseDown = false;\n}\n",
									"value" : "0.00000 0.00000"
								}
							},
							"id" : 161
						},
						{
							"constantshadervalues" : 
							{
								"brushAlphaJitter" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushAlphaJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].alpha_jitter, tex[1].alpha_jitter);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushAlphaVelMod" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushAlphaVelMod'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].alpha_vel, tex[1].alpha_vel);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushOffsetMirror" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushPositionJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].offset_mirror, tex[1].offset_mirror);\n}\n",
									"value" : "1.00000 1.00000"
								},
								"brushOffsetVelMod" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushAlphaVelMod'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].offset_vel, tex[1].offset_vel);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushPositionJitter" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushPositionJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].offset_jitter, tex[1].offset_jitter);\n}\n",
									"value" : "0.20000 0.40000"
								},
								"brushPositionOffset" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushPositionJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].offset, tex[1].offset);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushSizeJitter" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushSizeJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].size_jitter, tex[1].size_jitter);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushSizeVelMod" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushSizeVelMod'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].size_vel, tex[1].size_vel);\n}\n",
									"value" : "-0.70000 -0.70000"
								},
								"brushVelocityBounds" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushVelocityBounds'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\treturn new Vec2(cb.lo_vel, cb.hi_vel);\n}\n",
									"value" : "0.00000 5.00000"
								},
								"drawAlpha" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared['currentBrush'].alpha;\n}\n",
									"value" : 1
								},
								"drawHardness" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared.currentBrush.hardness;\n}\n",
									"scriptproperties" : 
									{
										"key" : "drawFeather"
									},
									"value" : 1
								},
								"drawRadius" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared.currentBrush.size;\n}\n",
									"value" : 0.22
								},
								"influenceMode" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'influenceMode'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\tswitch(cb.stroke_type) {\n\t\tcase \"stamp\":\n\t\t\treturn 0.;\n\t\tcase \"spray_can\":\n\t\t\treturn 1.;\n\t\tcase \"connected_lines\":\n\t\t\treturn 2.;\n\t\tcase \"evenly_spaced\":\n\t\t\treturn 3.;\n\t\tcase \"straight_line\":\n\t\t\treturn 4.;\n\t\tdefault:\n\t\t\treturn 1.;\n\t}\n}\n",
									"value" : 0
								},
								"mouseDown" : 
								{
									"script" : "'use strict';\n\nvar lastFrame;\nvar mouseDown;\n\n/**\n * @param {Number} value - for property 'Mouse Down'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tlastFrame = 0;\n\tmouseDown = false;\n\tshared[\"cursorOnUi\"] = false;\n\treturn 0;\n}\n\n/**\n * @param {Vec2} value - for property 'Mouse Down (X = This Frame, Y = Last Frame)'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar vec = new Vec2((mouseDown && !shared[\"cursorOnUi\"] && !shared[\"locked\"]) ? 1 : 0, lastFrame);\n\tlastFrame = vec.x;\n\treturn vec;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tmouseDown = false;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tmouseDown = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tmouseDown = false;\n}\n",
									"value" : "0.00000 0.00000"
								}
							},
							"id" : 64
						},
						{
							"combos" : 
							{
								"ENABLE_BLEND" : 1,
								"ENABLE_CPY_BRUSH" : 1,
								"ENABLE_SMEAR" : 1,
								"ENABLE_UNDO_CMD" : 1
							},
							"constantshadervalues" : 
							{
								"brush0RProb" : 1,
								"brush0Spacing" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared.currentBrush.spacing;\n}\n",
									"scriptproperties" : 
									{
										"key" : "brushSpacing"
									},
									"value" : 0.125
								},
								"brush0Texture" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'brush0Texture'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared.currentBrush.brush_type == 'textures' ? 1.0 : 0.0;\n}\n",
									"value" : 1
								},
								"brush1GProb" : 0.5,
								"brush1Prob" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brush1Prob'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\tvar tex = cb.tex;\n\tif(cb.brush_type == \"procedural\") {\n\t\treturn new Vec2(1.0,0.0);\n\t}\n\treturn new Vec2(tex[0].probability, tex[1].probability);\n}\n",
									"value" : "1.00000 1.00000"
								},
								"brush2BProb" : 0.0,
								"brush2Factor" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brush2Factor'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush\n\tvar tex = cb.tex;\n\tif(cb.brush_type == \"procedural\") {\n\t\treturn new Vec2(1.0, 0.0);\n\t}\n\treturn new Vec2(tex[0].influence, tex[1].influence);\n}\n",
									"value" : "1.00000 1.00000"
								},
								"brush3AProb" : "0 0 0 0",
								"brushAlphaJitter" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushAlphaJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].alpha_jitter, tex[1].alpha_jitter);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushAlphaVelMod" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushAlphaVelMod'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].alpha_vel, tex[1].alpha_vel);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushOffsetMirror" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushPositionJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].offset_mirror, tex[1].offset_mirror);\n}\n",
									"value" : "1.00000 1.00000"
								},
								"brushOffsetVelMod" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushAlphaVelMod'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].offset_vel, tex[1].offset_vel);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushPositionJitter" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushPositionJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].offset_jitter, tex[1].offset_jitter);\n}\n",
									"value" : "0.20000 0.40000"
								},
								"brushPositionOffset" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushPositionJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].offset, tex[1].offset);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushProb" : "1 1 0 0",
								"brushRotJitter" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushRotJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].rot_jitter, tex[1].rot_jitter);\n}\n",
									"value" : "1.00000 1.00000"
								},
								"brushRotLock" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushRotLock'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].rot_lock ? 1:0, tex[1].rot_lock? 1:0);\n}\n",
									"value" : "1.00000 1.00000"
								},
								"brushRotOffset" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushRotJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].rot, tex[1].rot);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushSizeFactor" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushSizeFactor'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\tvar tex = cb.tex;\n\tif(cb.brush_type == \"procedural\") {\n\t\t// any value other than 1 doesn't make sense here since we don't have multiple textures that need different sizes\n\t\t// the overall size parameter is sufficient here\n\t\treturn new Vec2(1., 1.);\n\t}\n\treturn new Vec2(tex[0].size, tex[1].size);\n}\n",
									"value" : "1.00000 1.00000"
								},
								"brushSizeJitter" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushSizeJitter'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].size_jitter, tex[1].size_jitter);\n}\n",
									"value" : "0.00000 0.00000"
								},
								"brushSizeVelMod" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushSizeVelMod'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar tex = shared.currentBrush.tex;\n\treturn new Vec2(tex[0].size_vel, tex[1].size_vel);\n}\n",
									"value" : "-0.70000 -0.70000"
								},
								"brushSpacing" : 
								{
									"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Property Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared[scriptProperties['key']];\n}\n",
									"scriptproperties" : 
									{
										"key" : "brushSpacing"
									},
									"value" : 0.25
								},
								"brushSpacingOffset" : 1,
								"brushVelAlphaMod" : -0.31,
								"brushVelMax" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'brushVelMax'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared.currentBrush.hi_vel;\n}\n",
									"value" : 5
								},
								"brushVelSizeMod" : -0.69,
								"brushVelocityBounds" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Vec2} value - for property 'brushVelocityBounds'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\treturn new Vec2(cb.lo_vel, cb.hi_vel);\n}\n",
									"value" : "0.00000 5.00000"
								},
								"cmd" : 
								{
									"script" : "'use strict';\n\n\n/**\n * @param {Number} value - for property 'Copy Below (Dont, Reset, Noise)'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\t\n\treturn value;\n}\n\n\n/**\n * @param {Number} value - for property 'Copy Below (Reset)'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tif(shared[\"locked\"]) {\n\t\tif(shared[\"cmd\"] != \"none\") {\n\t\t\tshared[\"cmd\"] = \"none\";\n\t\t}\n\t\treturn 0.;\n\t}\n\n\tswitch(shared[\"cmd\"]) {\n\t\tcase \"reset\":\n\t\t\tshared[\"cmd\"] = \"none\";\n\t\t\treturn 1.;\n\t\tcase \"undo\":\n\t\t\tshared[\"cmd\"] = \"none\";\n\t\t\treturn 2.;\n\t\tcase \"blend\":\n\t\t\tshared[\"cmd\"] = \"none\";\n\t\t\treturn 3.;\n\t\tcase \"none\":\n\t\t\treturn 0.;\n\t\tdefault:\n\t\t\tshared[\"cmd\"] = \"none\";\n\t\t\treturn 0.;\n\t}\n}",
									"value" : 1
								},
								"drawAlpha" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared['currentBrush'].alpha;\n}\n",
									"value" : 1
								},
								"drawCol" : 
								{
									"script" : "'use strict';\n\nimport * as WEColor from 'WEColor';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\treturn WEColor.hsv2rgb(new Vec3(cb.hue, cb.saturation, cb.value));;\n}\n",
									"value" : "1.00000 1.00000 1.00000"
								},
								"drawHardness" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared.currentBrush.hardness;\n}\n",
									"scriptproperties" : 
									{
										"key" : "drawFeather"
									},
									"value" : 1
								},
								"drawMode" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\tswitch(cb.draw_mode) {\n\t\tcase \"paint\":\n\t\t\treturn 1.;\n\t\tcase \"smear\":\n\t\t\treturn 2.;\n\t\tcase \"flatten\":\n\t\t\treturn 3.;\n\t\tcase \"blend\":\n\t\t\treturn 4.;\n\t\tcase \"erase\":\n\t\tdefault:\n\t\t\treturn 0.;\n\t}\n}\n",
									"value" : 0
								},
								"drawRadius" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared.currentBrush.size;\n}\n",
									"value" : 0.22
								},
								"influenceMode" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'influenceMode'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\tswitch(cb.stroke_type) {\n\t\tcase \"stamp\":\n\t\t\treturn 0.;\n\t\tcase \"spray_can\":\n\t\t\treturn 1.;\n\t\tcase \"connected_lines\":\n\t\t\treturn 2.;\n\t\tcase \"evenly_spaced\":\n\t\t\treturn 3.;\n\t\tcase \"straight_line\":\n\t\t\treturn 4.;\n\t\tdefault:\n\t\t\treturn 1.;\n\t}\n}\n",
									"value" : 0
								},
								"mouseDown" : 
								{
									"script" : "'use strict';\n\nvar lastFrame;\nvar mouseDown;\n\n/**\n * @param {Number} value - for property 'Mouse Down'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tlastFrame = 0;\n\tmouseDown = false;\n\tshared[\"cursorOnUi\"] = false;\n\treturn 0;\n}\n\n/**\n * @param {Vec2} value - for property 'Mouse Down (X = This Frame, Y = Last Frame)'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar vec = new Vec2((mouseDown && !shared[\"cursorOnUi\"] && !shared[\"locked\"]) ? 1 : 0, lastFrame);\n\tlastFrame = vec.x;\n\treturn vec;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tmouseDown = false;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tmouseDown = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tmouseDown = false;\n}\n",
									"value" : "0.00000 0.00000"
								}
							},
							"id" : 62,
							"textures" : 
							[
								null,
								null,
								null,
								null,
								"_rt_imageLayerComposite_288_a",
								null,
								"_rt_imageLayerComposite_536_a"
							]
						},
						{
							"constantshadervalues" : 
							{
								"brush0Spacing" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared.currentBrush.spacing;\n}\n",
									"scriptproperties" : 
									{
										"key" : "brushSpacing"
									},
									"value" : 0.25
								},
								"drawRadius" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared.currentBrush.size;\n}\n",
									"value" : 0.22
								},
								"mouseDown" : 
								{
									"script" : "'use strict';\n\nvar lastFrame;\nvar mouseDown;\n\n/**\n * @param {Number} value - for property 'Mouse Down'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tlastFrame = 0;\n\tmouseDown = false;\n\tshared[\"cursorOnUi\"] = false;\n\treturn 0;\n}\n\n/**\n * @param {Vec2} value - for property 'Mouse Down (X = This Frame, Y = Last Frame)'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar vec = new Vec2((mouseDown && !shared[\"cursorOnUi\"] && !shared[\"locked\"]) ? 1 : 0, lastFrame);\n\tlastFrame = vec.x;\n\treturn vec;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tmouseDown = false;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tmouseDown = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tmouseDown = false;\n}\n",
									"value" : "0.00000 0.00000"
								}
							},
							"id" : 28
						},
						{
							"combos" : 
							{
								"ENABLE_BLEND" : 1,
								"ENABLE_CPY_BRUSH" : 1,
								"ENABLE_SMEAR" : 1,
								"ENABLE_UNDO_CMD" : 1
							},
							"constantshadervalues" : 
							{
								"drawCol" : 
								{
									"script" : "'use strict';\n\nimport * as WEColor from 'WEColor';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\treturn WEColor.hsv2rgb(new Vec3(cb.hue, cb.saturation, cb.value));;\n}\n",
									"value" : "1.00000 1.00000 1.00000"
								},
								"drawMode" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\tswitch(cb.draw_mode) {\n\t\tcase \"paint\":\n\t\t\treturn 1.;\n\t\tcase \"smear\":\n\t\t\treturn 2.;\n\t\tcase \"flatten\":\n\t\t\treturn 3.;\n\t\tcase \"blend\":\n\t\t\treturn 4.;\n\t\tcase \"erase\":\n\t\tdefault:\n\t\t\treturn 0.;\n\t}\n}\n",
									"value" : 0
								},
								"influenceMode" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'influenceMode'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\tswitch(cb.stroke_type) {\n\t\tcase \"stamp\":\n\t\t\treturn 0.;\n\t\tcase \"spray_can\":\n\t\t\treturn 1.;\n\t\tcase \"connected_lines\":\n\t\t\treturn 2.;\n\t\tcase \"evenly_spaced\":\n\t\t\treturn 3.;\n\t\tcase \"straight_line\":\n\t\t\treturn 4.;\n\t\tdefault:\n\t\t\treturn 1.;\n\t}\n}\n",
									"value" : 0
								},
								"mouseDown" : 
								{
									"script" : "'use strict';\n\nvar lastFrame;\nvar mouseDown;\n\n/**\n * @param {Number} value - for property 'Mouse Down'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tlastFrame = 0;\n\tmouseDown = false;\n\tshared[\"cursorOnUi\"] = false;\n\treturn 0;\n}\n\n/**\n * @param {Vec2} value - for property 'Mouse Down (X = This Frame, Y = Last Frame)'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tvar vec = new Vec2((mouseDown && !shared[\"cursorOnUi\"] && !shared[\"locked\"]) ? 1 : 0, lastFrame);\n\tlastFrame = vec.x;\n\treturn vec;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tmouseDown = false;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tmouseDown = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tmouseDown = false;\n}\n",
									"value" : "0.00000 0.00000"
								}
							},
							"id" : 73,
							"textures" : [ null, null, null, null, "_rt_imageLayerComposite_288_a" ]
						}
					],
					"visible" : true
				}
			],
			"id" : 16,
			"image" : "models/util/projectlayer.json",
			"name" : "Canvas",
			"origin" : "1280.00000 720.00000 0.00000",
			"parallaxDepth" : "0.00000 0.00000",
			"size" : "2560.00000 1440.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\n// SETUP & EVENT HANDLING SCRIPT\n\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'startBrush',\n\t\tlabel: 'Start Brush',\n\t\tvalue: 'Put json settings of the brush you want to start with here.'\n\t})\n\t.finish();\n\nfunction tryParseJSONObject (jsonString){\n    try {\t// https://stackoverflow.com/questions/3710204/how-to-check-if-a-string-is-a-valid-json-string\n        var o = JSON.parse(jsonString);\n        if (o && typeof o === \"object\") {\n            return o;\n        }\n    }\n    catch (e) { }\n\n    return false;\n};\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function init(value) {\n\tshared['brushEditor'] = {\n\t\tvisible: false,\t\t// set true to make brush designer window visible\n\t\ttexEdit: false,\t\t// set true to make texture editor visible\n\t\tpatEdit: false,\t\t// set true to make pattern selection pop-out visible\n\t\tbrushId: 0,\t\t\t// currently edited brush\n\t\ttexCnt: 2,\t\t\t// number of textures that can be simulatneously assigned to a brush\n\t\ttexId : 0,\t\t\t// currently edited texture\n\t\ttexPage: 0,\t\t\t// currently open texture page in texture editor\n\t\ttexImgTotal: 0,\t\t// nr of available images that can be set as brush texture (set by the tex editor itself)\n\t\ttexPageSize: -1,\t// page size of the texture editor (set by the tex editor itself)\n\t\tchanged: true,\t\t// set to true to force a ui update next frame\n\t\thasChanged: false\t// if set to true ui shall update\n\t};\n\tshared['currentBrush'] = {\n\t\ttex: [{images:[]},{images:[]}]\n\t};\n\tfor(var i = 0; i < shared['brushEditor'].texCnt; i++) {\n\t\tshared['currentBrush']['tex'][i] = {images:[]};\n\t}\n\n\tshared['brushes'] = localStorage.get('brushes', localStorage.LOCATION_GLOBAL) || [];\n\n\treturn value;\n}\n\nexport function destroy() {\n\tlocalStorage.set('brushes', shared.brushes, localStorage.LOCATION_GLOBAL);\n}\nvar tryStartup = true;\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\tif(tryStartup) {\n\t\tif(!Number.isFinite(shared.currentBrush[\"hue\"])) {\n\t\t\tvar sB = tryParseJSONObject(scriptProperties[\"startBrush\"]);\n\t\t\tif(sB === false) {\n\t\t\t\ttryStartup = false;\n\t\t\t}else {\n\t\t\t\tshared.currentBrush = sB;\n\t\t\t\tshared['brushEditor']['changed'] = true;\n\t\t\t}\n\t\t}else {\n\t\t\ttryStartup = false;\n\t\t}\n\t}\n\tif(shared['brushEditor']['changed']) {\n\t\tshared['brushEditor']['hasChanged'] = true;\n\t\tshared['brushEditor']['changed'] = false;\n\t}else {\n\t\tshared['brushEditor']['hasChanged'] = false;\n\t}\n\treturn value;\n}",
				"scriptproperties" : 
				{
					"startBrush" : "{\"tex\":[{\"probability\":0.5054068565368652,\"influence\":0.18118762969970703,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0.26494312286376953,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":true,\"offset\":0.1698323567708333,\"offset_mirror\":1,\"offset_jitter\":0,\"offset_vel\":0,\"images\":[\"Sprinkles Jaggy\",\"Cloud\"]},{\"probability\":0.43509435653686523,\"influence\":0.8921256065368652,\"size\":1,\"size_jitter\":0,\"size_vel\":-0.20794391632080078,\"alpha_jitter\":1,\"alpha_vel\":-0.1845073699951172,\"scatter_jitter\":0.39384889602661133,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":false,\"offset\":0.32740737452651514,\"offset_mirror\":1,\"offset_jitter\":1,\"offset_vel\":0,\"images\":[\"Sprinkles\",\"Cloud\"]}],\"size\":0.2093242108821869,\"alpha\":0.5422885417938232,\"spacing\":0.1,\"hue\":0.5892025573430383,\"saturation\":1,\"value\":0.2784300148487091,\"hardness\":0.1,\"lo_vel\":0,\"hi_vel\":5,\"draw_mode\":\"paint\",\"stroke_type\":\"evenly_spaced\",\"brush_type\":\"textures\",\"pat\":[]}"
				},
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.96471 0.96471 0.96471",
			"id" : 293,
			"image" : "models/util/solidlayer.json",
			"name" : "Brush Designer",
			"origin" : 
			{
				"script" : "'use strict';\n\n// Created by Rusty\n\nexport var scriptProperties = createScriptProperties()\n    .addCheckbox({\n        name: 'isMovable',\n        label: 'Is movable',\n        value: false\n    })\n    .finish();\n\nconst storageName = \"storedPosOldSquareMIC\";\nlet isDragging = false;\nlet dragOffset;\n\nexport function cursorDown(event) {\n    isDragging = true;\n    dragOffset = thisLayer.origin.subtract(event.worldPosition);\n}\n\nexport function cursorUp(event) {\n    isDragging = false;\n    localStorage.set(storageName, thisLayer.origin);\n}\n\nexport function cursorMove(event) {\n    if (isDragging && scriptProperties.isMovable) {\n        thisLayer.origin = event.worldPosition.add(dragOffset);\n    }\n}\n\nexport function init() {\n    return localStorage.get(storageName) || thisLayer.origin;\n} \n",
				"scriptproperties" : 
				{
					"isMovable" : true
				},
				"value" : "617.03979 1378.90369 1.00000"
			},
			"size" : "1060.00000 60.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared.brushEditor.visible;\n}\n",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 418,
			"image" : "models/Window.json",
			"name" : "Background",
			"origin" : 
			{
				"script" : "'use strict';\n\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"value" : "-0.00012 -334.38184 0.00000"
			},
			"parent" : 293,
			"scale" : "0.60001 0.59999 0.60000",
			"size" : "2030.00000 1256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.96471 0.96471 0.96471",
			"id" : 304,
			"image" : "models/util/solidlayer.json",
			"name" : "Move Bar Visual",
			"origin" : "0.00012 0.00000 0.00000",
			"parent" : 293,
			"scale" : "4.14173 0.23501 0.60000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 0.00000 3.14159",
			"castshadow" : false,
			"id" : 455,
			"image" : "models/Next_2.json",
			"name" : "Previous_2",
			"origin" : 
			{
				"script" : "'use strict';\n\nvar hovered =false;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(hovered) {\n\t\tshared.tooltip = \"Previous Brush (Discard Changes)\";\n\t}\n\treturn value;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tshared.brushEditor.brushId = (shared.brushes.length + shared.brushEditor.brushId - 1) % shared.brushes.length;\n\tshared.currentBrush = JSON.parse(JSON.stringify(shared.brushes[shared.brushEditor.brushId]));\n\tshared.brushEditor.changed = true;\n}\n\n\n",
				"value" : "-120.00000 0.00003 0.00000"
			},
			"parent" : 304,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 420,
			"image" : "models/Next_2.json",
			"name" : "Next_2",
			"origin" : 
			{
				"script" : "'use strict';\n\nvar hovered =false;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(hovered) {\n\t\tshared.tooltip = \"Next Brush (Discard Changes)\";\n\t}\n\treturn value;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tshared.brushEditor.brushId = (shared.brushEditor.brushId + 1) % shared.brushes.length;\n\tshared.currentBrush = JSON.parse(JSON.stringify(shared.brushes[shared.brushEditor.brushId]));\n\tshared.brushEditor.changed = true;\n}\n",
				"value" : "-105.00000 0.00000 0.00000"
			},
			"parent" : 304,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "1.00000 1.00000 1.00000",
			"blockalign" : false,
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 295,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Window Title",
			"opaquebackground" : false,
			"origin" : "-95.00000 20.00000 0.00000",
			"padding" : 32,
			"parent" : 304,
			"pointsize" : 8.0,
			"scale" : "0.24144 4.25508 1.66667",
			"size" : "393.00000 38.00000",
			"text" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {String} value - for property 'text'\n * @return {String} - update current property value\n */\nexport function update(value) {\n\t\n\treturn `Editing Custom Brush ${shared.brushEditor.brushId + 1} / ${shared.brushes.length}`;\n}\n",
				"value" : "Editing Custom Brush X / Y"
			},
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 434,
			"image" : "models/Print_2.json",
			"name" : "Print_2",
			"origin" : 
			{
				"script" : "'use strict';\n\nvar hovered =false;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(hovered) {\n\t\tshared.tooltip = \"Print Brush Settings to Log\";\n\t}\n\treturn value;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tconsole.log(JSON.stringify(shared['currentBrush']));\n}\n",
				"value" : "45.00000 0.00000 0.00000"
			},
			"parent" : 304,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 406,
			"image" : "models/Delete_2.json",
			"name" : "Delete_2",
			"origin" : 
			{
				"script" : "'use strict';\n\nvar hovered =false;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(hovered) {\n\t\tshared.tooltip = \"Delete Brush\";\n\t}\n\treturn value;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tif(shared.brushes.length <= 1) {return;}\n\n\tvar brushes = shared.brushes;\n\tvar editor = shared.brushEditor;\n\n\tbrushes.splice(editor.brushId, 1);\n\teditor.brushId = Math.min(editor.brushId, brushes.length - 1);\n\tshared.currentBrush = JSON.parse(JSON.stringify(brushes[editor.brushId]));\n\teditor.changed = true;\n\n\tlocalStorage.set('brushes', brushes, localStorage.LOCATION_GLOBAL);\n}\n",
				"value" : "60.00000 0.00000 0.00000"
			},
			"parent" : 304,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 448,
			"image" : "models/Refresh_2.json",
			"name" : "Refresh_2",
			"origin" : 
			{
				"script" : "'use strict';\n\nvar hovered =false;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(hovered) {\n\t\tshared.tooltip = \"Reset Brush / Reload all Brushes\";\n\t}\n\treturn value;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tshared.brushes = localStorage.get('brushes', localStorage.LOCATION_GLOBAL);\n\tshared.currentBrush = JSON.parse(JSON.stringify(shared.brushes[shared.brushEditor.brushId]));\n\tshared.brushEditor.changed = true;\n}\n",
				"value" : "75.00000 0.00000 0.00000"
			},
			"parent" : 304,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 414,
			"image" : "models/Add_2.json",
			"name" : "Add_2",
			"origin" : 
			{
				"script" : "'use strict';\n\nvar hovered =false;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(hovered) {\n\t\tshared.tooltip = \"Save as New Brush\";\n\t}\n\treturn value;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tshared.brushes.push(JSON.parse(JSON.stringify(shared['currentBrush'])));\n\tshared.brushEditor.brushId = shared.brushes.length - 1;\n\tshared.brushEditor.changed = true;\n\tlocalStorage.set('brushes', shared['brushes'], localStorage.LOCATION_GLOBAL);\n}\n",
				"value" : "90.00000 0.00000 0.00000"
			},
			"parent" : 304,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 438,
			"image" : "models/Save_2.json",
			"name" : "Save_2",
			"origin" : 
			{
				"script" : "'use strict';\n\nvar hovered =false;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(hovered) {\n\t\tshared.tooltip = \"Save Brush Changes\";\n\t}\n\treturn value;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tshared['brushes'][shared.brushEditor.brushId] = JSON.parse(JSON.stringify(shared['currentBrush']));\n\tlocalStorage.set('brushes', shared['brushes'], localStorage.LOCATION_GLOBAL);\n}\n",
				"value" : "105.00000 0.00000 0.00000"
			},
			"parent" : 304,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 453,
			"image" : "models/Close_2.json",
			"name" : "Close_2",
			"origin" : 
			{
				"script" : "'use strict';\n\nvar hovered =false;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(hovered) {\n\t\tshared.tooltip = \"Close Brush Editor\";\n\t}\n\treturn value;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tshared.brushEditor.visible = !shared.brushEditor.visible;\n\tshared[\"cursorOnUi\"] = false;\n\thovered = false;\n}\n",
				"value" : "120.00000 0.00000 0.00000"
			},
			"parent" : 304,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 358,
			"name" : "Settings",
			"origin" : "-529.28687 -56.72253 0.00000",
			"parent" : 293
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 307,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Draw Mode",
			"opaquebackground" : false,
			"origin" : "60.00000 0.00000 0.00000",
			"padding" : 0,
			"parent" : 358,
			"pointsize" : 5.0,
			"size" : "107.00000 24.00000",
			"text" : "Draw Mode:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "draw_mode",
					"val" : "paint"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 357,
			"image" : "models/small_circle@2x.json",
			"name" : "Paint",
			"origin" : "63.00000 -2.20166 0.00000",
			"parent" : 307,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 359,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 357,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 361,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 357,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "45.00000 24.00000",
			"text" : "Paint",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "draw_mode",
					"val" : "erase"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 322,
			"image" : "models/small_circle@2x.json",
			"name" : "Erase",
			"origin" : "166.00000 -2.20166 0.00000",
			"parent" : 307,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 323,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 322,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 324,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 322,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "51.00000 24.00000",
			"text" : "Erase",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "draw_mode",
					"val" : "blend"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 329,
			"image" : "models/small_circle@2x.json",
			"name" : "Blend",
			"origin" : "266.47632 -2.20166 0.00000",
			"parent" : 307,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 330,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 329,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 331,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 329,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "50.00000 24.00000",
			"text" : "Blend",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "draw_mode",
					"val" : "smear"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 335,
			"image" : "models/small_circle@2x.json",
			"name" : "Smear",
			"origin" : "373.49219 -2.20166 0.00000",
			"parent" : 307,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 336,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 335,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 337,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 335,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "60.00000 24.00000",
			"text" : "Smear",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "draw_mode",
					"val" : "flatten"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 341,
			"image" : "models/small_circle@2x.json",
			"name" : "Flatten",
			"origin" : "485.56934 -2.20166 0.00000",
			"parent" : 307,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 342,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 341,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 343,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 341,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "59.00000 24.00000",
			"text" : "Flatten",
			"verticalalign" : "center"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 360,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Stroke Type",
			"opaquebackground" : false,
			"origin" : "60.00000 -35.00000 0.00000",
			"padding" : 0,
			"parent" : 358,
			"pointsize" : 5.0,
			"size" : "109.00000 24.00000",
			"text" : "Stroke Type:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn shared['currentBrush']['draw_mode'] != 'smear';;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "stroke_type",
					"val" : "stamp"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 362,
			"image" : "models/small_circle@2x.json",
			"name" : "Stamp",
			"origin" : "63.00000 -2.20166 0.00000",
			"parent" : 360,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 363,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 362,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 364,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 362,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "57.00000 24.00000",
			"text" : "Stamp",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "stroke_type",
					"val" : "spray_can"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 365,
			"image" : "models/small_circle@2x.json",
			"name" : "Spray Can",
			"origin" : "166.00000 -2.20166 0.00000",
			"parent" : 360,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 366,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 365,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 367,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 365,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "93.00000 24.00000",
			"text" : "Spray Can",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "stroke_type",
					"val" : "evenly_spaced"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 371,
			"image" : "models/small_circle@2x.json",
			"name" : "Evenly Spaced",
			"origin" : "310.94531 -2.20166 0.00000",
			"parent" : 360,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 372,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 371,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 373,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 371,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "131.00000 24.00000",
			"text" : "Evenly Spaced",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn shared['currentBrush']['draw_mode'] != 'smear';\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "stroke_type",
					"val" : "straight_line"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 608,
			"image" : "models/small_circle@2x.json",
			"name" : "Straight Line",
			"origin" : "501.45264 -2.20166 0.00000",
			"parent" : 360,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 610,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 608,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 611,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 608,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "108.00000 24.00000",
			"text" : "Straight Line",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn shared['currentBrush']['draw_mode'] != 'smear';\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "stroke_type",
					"val" : "connected_lines"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 368,
			"image" : "models/small_circle@2x.json",
			"name" : "Connected Line",
			"origin" : "659.97156 -2.20166 0.00000",
			"parent" : 360,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 369,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 368,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 370,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 368,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "138.00000 24.00000",
			"text" : "Connected Line",
			"verticalalign" : "center"
		},
		{
			"anchor" : "topright",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 695,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Pattern Texture",
			"opaquebackground" : false,
			"origin" : "1001.71094 15.70020 0.00000",
			"padding" : 0,
			"parent" : 358,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "69.00000 48.00000",
			"text" : "Pattern \nTexture:",
			"verticalalign" : "top"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"dependencies" : [ 288 ],
			"effects" : 
			[
				{
					"file" : "effects/blend/effect.json",
					"id" : 700,
					"name" : "",
					"passes" : 
					[
						{
							"combos" : 
							{
								"BLENDMODE" : 0,
								"TRANSFORMUV" : 1
							},
							"constantshadervalues" : 
							{
								"blendangle" : 0,
								"blendoffset" : "-1240 -680",
								"blendscale" : 0.059999999,
								"multiply" : 1.0
							},
							"id" : 701,
							"textures" : [ null, "_rt_imageLayerComposite_288_a" ]
						}
					],
					"visible" : true
				}
			],
			"id" : 686,
			"image" : "models/util/solidlayer.json",
			"name" : "Pattern Preview",
			"origin" : 
			{
				"script" : "'use strict';\n\nvar penIco;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpenIco = thisLayer.getChildren()[0];\n\tpenIco.visible = false;\n\treturn value;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tpenIco.visible = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tpenIco.visible = false;\n}",
				"value" : "41.94836 -37.87854 0.00000"
			},
			"parent" : 695,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "80.00000 80.00000"
		},
		{
			"alignment" : "bottomright",
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 691,
			"image" : "models/Pen_small.json",
			"name" : "Edit",
			"origin" : 
			{
				"script" : "'use strict';\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) { return; }\n\tshared.brushEditor.patEdit = !shared.brushEditor.patEdit;\n\tshared.brushEditor.changed = true;\n}\n",
				"value" : "40.00000 -40.00000 0.00000"
			},
			"parent" : 686,
			"scale" : "0.10000 0.10000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar check;\nvar hovered = false;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.draw_mode === 'blend';\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tcheck = thisLayer.getChildren()[0];\n\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\tif(hovered) {\n\t\tshared.tooltip = \"Check this if any active pattern texture uses the color settings of the brush.\";\n\t}\n\treturn colorDefault;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled && isVisible()) {\n\t\tshared.currentBrush[scriptProperties['key']] = !shared.currentBrush[scriptProperties['key']];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tthisLayer.visible = enabled;\n\tcheck.visible = shared.currentBrush[scriptProperties['key']] === true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}",
				"scriptproperties" : 
				{
					"key" : "blend_with_color"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 853,
			"image" : "models/util/solidlayer.json",
			"name" : "Pattern Uses Color",
			"origin" : "-294.90500 -16.44880 0.00000",
			"parent" : 695,
			"scale" : "0.95238 0.95236 0.95238",
			"size" : "23.00000 23.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 854,
			"image" : "models/util/solidlayer.json",
			"name" : "Check",
			"parent" : 853,
			"scale" : "0.61604 0.61604 0.61604",
			"size" : "23.00000 23.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 855,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "18.61926 2.56866 0.00000",
			"padding" : 0,
			"parent" : 853,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05002 1.05000",
			"size" : "167.00000 24.00000",
			"text" : "Pattern Uses Color",
			"verticalalign" : "center"
		},
		{
			"angles" : 
			{
				"script" : "'use strict';\n\nexport function init(value) {\n\tvar bg = thisLayer.getChildren()[0];\n\tvar original = thisLayer.getChildren()[1];\n\tvar template = JSON.stringify(buildTemplate(original));\n\t//console.log(template);\n\trecursiveDestroy(original);\n\n\tvar effects = [];\n\tvar idx = 0;\n\tvar pattern = thisScene.getInitialLayerConfig(thisScene.getLayer(\"Pattern Texture\"));\n\tfor(const effect of pattern.effects) {\n\t\tvar name = effect.name;\n\t\teffects.push(name);\n\n\t\tvar inst = JSON.parse(template);\n\n\t\tinst.layer[\"origin\"] = `20 ${-(idx * 40 + 20)} 0`; // set position\n\t\tinst.layer[\"name\"] = name;\n\t\tinst.children[1].layer[\"text\"] = name;\n\n\t\tinstantiateTemplate(inst, thisLayer);\n\t\tidx++;\n\t}\n\tbg.scale = new Vec3(bg.scale.x, effects.length, 1.0);\n\t//console.log(JSON.stringify(textures));\n\t\n\treturn value;\n}\n\n\nexport function buildTemplate(layer) {\n\tvar tmp = {\n\t\tlayer: thisScene.getInitialLayerConfig(layer),\n\t\tchildren: []\n\t};\n\n\tfor(const child of layer.getChildren()) {\n\t\ttmp.children.push(buildTemplate(child));\n\t}\n\treturn tmp;\n}\n\nexport function instantiateTemplate(template, parent) {\n\tvar l = thisScene.createLayer(template.layer);\n\tl.setParent(parent, false);\n\n\tfor(const child of template.children) {\n\t\tinstantiateTemplate(child, l);\n\t}\n\treturn l;\n}\n\nexport function recursiveDestroy(layer) {\n\tfor(var child of layer.getChildren()) {\n\t\trecursiveDestroy(child);\n\t}\n\tthisScene.destroyLayer(layer);\n}",
				"value" : "0.00000 -0.00000 0.00000"
			},
			"id" : 707,
			"name" : "Pattern Selector",
			"origin" : "145.00000 0.00000 0.00000",
			"parent" : 695,
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared.brushEditor.patEdit;\n}\n",
				"value" : true
			}
		},
		{
			"alignment" : "topleft",
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.18824 0.18824 0.18824",
			"id" : 697,
			"image" : "models/util/solidlayer.json",
			"name" : "Background",
			"origin" : 
			{
				"script" : "'use strict';\n\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 707,
			"size" : "250.00000 40.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nvar enabled = false;\nvar check;\nvar checked;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.draw_mode == 'blend';\n}\n\n/**\n * Since this layer is instantiated dynamically, it could be that not all other relative layers we want to access have been created at the time init() is called.\n * So instead we call lazyInit whenever we actually want to access variables that should be initialized with init.\n */\nexport function lazyinit() {\n\tif(typeof check === \"undefined\") {\n\t\tcheck = thisLayer.getChildren()[0];\n\t}\n\n\tif(typeof shared.currentBrush.pat === \"undefined\") {\n\t\tshared.currentBrush.pat = [];\n\t}\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : colorDisabled;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!enabled || !isVisible()) {\n\t\treturn;\n\t}\n\n\tlazyinit();\n\tvar cb = shared.currentBrush;\n\tif(typeof cb.pat === \"undefined\") {\n\t\tcb.pat = [];\n\t}\n\n\tchecked = !checked;\n\n\tif(checked) {\n\t\tcb.pat.push(thisLayer.name);\n\t}else {\n\t\tvar idx = cb.pat.indexOf(thisLayer.name);\n\t\tif(idx >= 0) {\n\t\t\tcb.pat.splice(idx, 1);\n\t\t}\n\t}\n\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t\n}\n\nexport function refresh() {\n\tlazyinit();\n\tenabled = shouldEnable();\n\tchecked = shared.currentBrush.pat.indexOf(thisLayer.name) >= 0;\n\tcheck.visible = checked;\n}\n\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 699,
			"image" : "models/util/solidlayer.json",
			"name" : "Pattern Option",
			"origin" : "20.00000 -20.00000 0.00000",
			"parent" : 707,
			"scale" : "1.00000 0.95236 0.95238",
			"size" : "23.00000 23.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 703,
			"image" : "models/util/solidlayer.json",
			"name" : "Check",
			"parent" : 699,
			"scale" : "0.61604 0.61604 0.61604",
			"size" : "23.00000 23.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 704,
			"limitrows" : true,
			"limituseellipsis" : true,
			"limitwidth" : true,
			"maxrows" : 1,
			"maxwidth" : 201.32629,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "18.61926 2.56866 0.00000",
			"padding" : 0,
			"parent" : 699,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05002 1.05000",
			"size" : "125.00000 24.00000",
			"text" : "Pattern Option",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 403,
			"name" : "General Brush Settings",
			"origin" : "100.00000 -86.00000 0.00000",
			"parent" : 358
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 408,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Size",
			"opaquebackground" : false,
			"origin" : "-40.00000 0.00000 0.00000",
			"padding" : 0,
			"parent" : 403,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "43.00000 24.00000",
			"text" : "Size:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 404,
			"image" : "models/util/solidlayer.json",
			"name" : "Size Slider",
			"origin" : "173.04742 -3.80957 0.00000",
			"parent" : 408,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 405,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\treturn true;\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? new Vec3(1.0, 1.0 , 1.0) : new Vec3(0.7, 0.7 , 0.7);\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n",
				"scriptproperties" : 
				{
					"key" : "size",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 404,
			"size" : "16.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 410,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Alpha",
			"opaquebackground" : false,
			"origin" : "346.76111 0.00000 0.00000",
			"padding" : 0,
			"parent" : 403,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "56.00000 24.00000",
			"text" : "Alpha:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 411,
			"image" : "models/util/solidlayer.json",
			"name" : "Alpha Slider",
			"origin" : "134.00000 -3.80957 0.00000",
			"parent" : 410,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 412,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\treturn true;\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? new Vec3(1.0, 1.0 , 1.0) : new Vec3(0.7, 0.7 , 0.7);\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n",
				"scriptproperties" : 
				{
					"key" : "alpha",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 411,
			"size" : "16.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 416,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Spacing",
			"opaquebackground" : false,
			"origin" : "718.20264 0.00000 0.00000",
			"padding" : 0,
			"parent" : 403,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "76.00000 24.00000",
			"text" : "Spacing:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 290,
			"image" : "models/util/solidlayer.json",
			"name" : "Spacing Slider",
			"origin" : "134.00000 -3.80957 0.00000",
			"parent" : 416,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 402,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\treturn shared['currentBrush']['stroke_type'] === \"evenly_spaced\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? new Vec3(1.0, 1.0 , 1.0) : new Vec3(0.7, 0.7 , 0.7);\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n",
				"scriptproperties" : 
				{
					"key" : "spacing",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 290,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 423,
			"name" : "Color Settings",
			"origin" : "100.00000 -137.00000 0.00000",
			"parent" : 358
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 424,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "H",
			"opaquebackground" : false,
			"origin" : "-40.00000 0.00000 0.00000",
			"padding" : 0,
			"parent" : 423,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "72.00000 24.00000",
			"text" : "Color H:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 425,
			"image" : "models/util/solidlayer.json",
			"name" : "Hue Slider",
			"origin" : "173.04742 -3.80969 0.00000",
			"parent" : 424,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 426,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.draw_mode === \"paint\" || (cb.draw_mode === \"blend\" && cb.blend_with_color === true);\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? new Vec3(1.0, 1.0 , 1.0) : new Vec3(0.7, 0.7 , 0.7);\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n",
				"scriptproperties" : 
				{
					"key" : "hue",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 425,
			"size" : "16.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 427,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "S",
			"opaquebackground" : false,
			"origin" : "346.76111 0.00000 0.00000",
			"padding" : 0,
			"parent" : 423,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "18.00000 24.00000",
			"text" : "S:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 428,
			"image" : "models/util/solidlayer.json",
			"name" : "Saturation Slider",
			"origin" : "134.00000 -3.80957 0.00000",
			"parent" : 427,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 429,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.draw_mode === \"paint\" || (cb.draw_mode === \"blend\" && cb.blend_with_color === true);\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? new Vec3(1.0, 1.0 , 1.0) : new Vec3(0.7, 0.7 , 0.7);\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n",
				"scriptproperties" : 
				{
					"key" : "saturation",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 428,
			"size" : "16.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 430,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "V",
			"opaquebackground" : false,
			"origin" : "718.20264 0.00000 0.00000",
			"padding" : 0,
			"parent" : 423,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "18.00000 24.00000",
			"text" : "V:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 431,
			"image" : "models/util/solidlayer.json",
			"name" : "Value Slider",
			"origin" : "134.00000 -3.80957 0.00000",
			"parent" : 430,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 432,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.draw_mode === \"paint\" || (cb.draw_mode === \"blend\" && cb.blend_with_color === true);\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? new Vec3(1.0, 1.0 , 1.0) : new Vec3(0.7, 0.7 , 0.7);\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n",
				"scriptproperties" : 
				{
					"key" : "value",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 431,
			"size" : "16.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 440,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Brush",
			"opaquebackground" : false,
			"origin" : "60.00000 -188.00000 0.00000",
			"padding" : 0,
			"parent" : 358,
			"pointsize" : 5.0,
			"size" : "56.00000 24.00000",
			"text" : "Brush:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['texId'] = 0;\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "brush_type",
					"val" : "procedural"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 441,
			"image" : "models/small_circle@2x.json",
			"name" : "Procedural",
			"origin" : "63.00000 -2.20166 0.00000",
			"parent" : 440,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 464,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 441,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 465,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 441,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "94.00000 24.00000",
			"text" : "Procedural",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.30196 0.30196 0.30196",
			"id" : 522,
			"image" : "models/util/solidlayer.json",
			"name" : "Proc Settings BG",
			"origin" : "98.08533 -72.20172 0.00000",
			"parent" : 440,
			"scale" : "5.93693 1.25618 1.25618",
			"size" : "80.00000 80.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared['currentBrush']['brush_type'] === \"procedural\";\n}\n",
				"value" : true
			}
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 480,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Hardness",
			"opaquebackground" : false,
			"origin" : "53.24365 -42.35925 0.00000",
			"padding" : 0,
			"parent" : 440,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "90.00000 24.00000",
			"text" : "Hardness:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 481,
			"image" : "models/util/solidlayer.json",
			"name" : "Hardness Slider",
			"origin" : "121.38690 -52.11554 0.00000",
			"parent" : 480,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 482,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\treturn shared['currentBrush']['brush_type'] === \"procedural\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? new Vec3(1.0, 1.0 , 1.0) : new Vec3(0.7, 0.7 , 0.7);\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n",
				"scriptproperties" : 
				{
					"key" : "hardness",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 481,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar dot;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\nvar colorError = new Vec3(1.0, 0.0, 0.0);\n\nexport function shouldEnable() {\n\tvar cb =  shared.currentBrush;\n\treturn cb.stroke_type != 'connected_lines' && cb.stroke_type != \"straight_line\";\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tdot = thisLayer.getChildren()[0];\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : (dot.visible ? colorError : colorDisabled);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled) {\n\t\tshared['currentBrush'][scriptProperties['key']] = scriptProperties['val'];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tdot.visible = shared['currentBrush'][scriptProperties['key']] == scriptProperties['val'];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "brush_type",
					"val" : "textures"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 466,
			"image" : "models/small_circle@2x.json",
			"name" : "Textures",
			"origin" : "409.87769 -2.20166 0.00000",
			"parent" : 440,
			"scale" : "0.70000 0.70000 0.70000",
			"size" : "32.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 467,
			"image" : "models/small_circle@2x.json",
			"name" : "Dot",
			"parent" : 466,
			"scale" : "0.50000 0.50000 0.50000",
			"size" : "32.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 468,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "26.59912 3.66943 0.00000",
			"padding" : 0,
			"parent" : 466,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "74.00000 24.00000",
			"text" : "Textures",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.30196 0.30196 0.30196",
			"id" : 491,
			"image" : "models/util/solidlayer.json",
			"name" : "Channel 0 BG",
			"origin" : "42.13728 -100.00000 0.00000",
			"parent" : 466,
			"scale" : "1.79454 1.79454 1.42857",
			"size" : "80.00000 80.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared['currentBrush']['brush_type'] === \"textures\" && shared['brushEditor']['texId'] == 0;\n}\n",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"dependencies" : [ 536 ],
			"effects" : 
			[
				{
					"file" : "effects/brush_preview/effect.json",
					"id" : 560,
					"name" : "",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"channelSelection" : "1 0 0 0"
							},
							"id" : 561,
							"textures" : [ "_rt_imageLayerComposite_516_a", "_rt_imageLayerComposite_536_a" ]
						}
					],
					"visible" : true
				}
			],
			"id" : 516,
			"image" : "models/util/solidlayer.json",
			"name" : "Channel 0",
			"origin" : 
			{
				"script" : "'use strict';\n\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tif(shared['currentBrush']['brush_type'] === 'textures') {\n\t\tshared['brushEditor']['texId'] = 0;\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(shared['currentBrush']['brush_type'] === 'textures') {\n\t\tthisLayer.getChildren()[0].visible = true;\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tthisLayer.getChildren()[0].visible = false;\n}\n",
				"value" : "42.13728 -100.00000 0.00000"
			},
			"parent" : 466,
			"scale" : "1.42857 1.42857 1.42857",
			"size" : "80.00000 80.00000"
		},
		{
			"alignment" : "bottomright",
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 617,
			"image" : "models/Pen_small.json",
			"name" : "Pen",
			"origin" : 
			{
				"script" : "'use strict';\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) { return; }\n\tshared.brushEditor.texEdit = true;\n\tshared.brushEditor.changed = true;\n}\n",
				"value" : "40.00000 -40.00000 0.00000"
			},
			"parent" : 516,
			"scale" : "0.10000 0.10000 1.00000",
			"size" : "256.00000 256.00000",
			"visible" : false
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.30196 0.30196 0.30196",
			"id" : 518,
			"image" : "models/util/solidlayer.json",
			"name" : "Channel 1 BG",
			"origin" : "228.69861 -100.00000 0.00000",
			"parent" : 466,
			"scale" : "2.92723 1.79454 1.79454",
			"size" : "80.00000 80.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared['currentBrush']['brush_type'] === \"textures\" && shared['brushEditor']['texId'] == 1;\n}\n",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"dependencies" : [ 536 ],
			"effects" : 
			[
				{
					"file" : "effects/brush_preview/effect.json",
					"id" : 589,
					"name" : "",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"channelSelection" : "0 1 0 0"
							},
							"id" : 0,
							"textures" : [ "_rt_imageLayerComposite_493_a", "_rt_imageLayerComposite_536_a" ]
						}
					],
					"visible" : true
				}
			],
			"id" : 493,
			"image" : "models/util/solidlayer.json",
			"name" : "Channel 1",
			"origin" : 
			{
				"script" : "'use strict';\n\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tif(shared['currentBrush']['brush_type'] === 'textures') {\n\t\tshared['brushEditor']['texId'] = 1;\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(shared['currentBrush']['brush_type'] === 'textures') {\n\t\tthisLayer.getChildren()[0].visible = true;\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tthisLayer.getChildren()[0].visible = false;\n}\n",
				"value" : "181.22736 -100.00000 0.00000"
			},
			"parent" : 466,
			"scale" : "1.42857 1.42857 1.42857",
			"size" : "80.00000 80.00000"
		},
		{
			"alignment" : "bottomright",
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 631,
			"image" : "models/Pen_small.json",
			"locktransforms" : true,
			"name" : "Pen",
			"origin" : 
			{
				"script" : "'use strict';\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) { return; }\n\tshared.brushEditor.texEdit = true;\n\tshared.brushEditor.changed = true;\n}\n",
				"value" : "40.00000 -40.00000 0.00000"
			},
			"parent" : 493,
			"scale" : "0.10000 0.10000 1.00000",
			"size" : "256.00000 256.00000",
			"visible" : false
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.30196 0.30196 0.30196",
			"id" : 520,
			"image" : "models/util/solidlayer.json",
			"name" : "Tex Settings BG",
			"origin" : "650.00000 -100.00000 0.00000",
			"parent" : 466,
			"scale" : "7.64657 1.79454 1.79454",
			"size" : "80.00000 80.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared['currentBrush']['brush_type'] === \"textures\";\n}\n",
				"value" : true
			}
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 495,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Probability",
			"opaquebackground" : false,
			"origin" : "497.60730 -56.35242 0.00000",
			"padding" : 0,
			"parent" : 466,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "95.00000 24.00000",
			"text" : "Probability:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 496,
			"image" : "models/util/solidlayer.json",
			"name" : "Value Slider",
			"origin" : "134.00000 -3.80957 0.00000",
			"parent" : 495,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 497,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\treturn shared['currentBrush']['brush_type'] === \"textures\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "probability",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 496,
			"size" : "16.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 501,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Influence",
			"opaquebackground" : false,
			"origin" : "497.60730 -128.23450 0.00000",
			"padding" : 0,
			"parent" : 466,
			"pointsize" : 5.0,
			"scale" : "1.50000 1.50000 1.50000",
			"size" : "84.00000 24.00000",
			"text" : "Influence:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 502,
			"image" : "models/util/solidlayer.json",
			"name" : "Value Slider",
			"origin" : "134.00000 -3.80957 0.00000",
			"parent" : 501,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 503,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\treturn shared['currentBrush']['brush_type'] === \"textures\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "influence",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 502,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.30196 0.30196 0.30196",
			"id" : 512,
			"image" : "models/util/solidlayer.json",
			"name" : "Tex Settings BG",
			"origin" : "529.00000 -442.00000 0.00000",
			"parent" : 358,
			"scale" : "0.60000 3.30060 1.25618",
			"size" : "2030.00000 80.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 285,
			"name" : "Blocks",
			"origin" : "-0.00024 4.12082 0.00000",
			"parent" : 512,
			"scale" : "1.66667 0.30297 0.79606"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 286,
			"name" : "Background",
			"origin" : "0.00000 97.00000 0.00000",
			"parent" : 285,
			"scale" : "1.00000 1.20000 0.99999"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.37647 0.37647 0.37647",
			"id" : 264,
			"image" : "models/util/solidlayer.json",
			"name" : "Tex Settings BG",
			"origin" : "-300.39087 -93.47833 0.00000",
			"parent" : 286,
			"scale" : "0.60000 3.11594 1.25619",
			"size" : "512.00000 60.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.37647 0.37647 0.37647",
			"id" : 318,
			"image" : "models/util/solidlayer.json",
			"name" : "Tex Settings BG",
			"origin" : "44.88904 -93.47833 0.00000",
			"parent" : 286,
			"scale" : "0.60000 3.11594 1.25619",
			"size" : "512.00000 60.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.37647 0.37647 0.37647",
			"id" : 326,
			"image" : "models/util/solidlayer.json",
			"name" : "Tex Settings BG",
			"origin" : "419.57996 -72.83289 0.00000",
			"parent" : 286,
			"scale" : "0.60000 2.42776 1.25619",
			"size" : "512.00000 60.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 313,
			"name" : "Text",
			"origin" : "0.00000 -36.83761 0.00000",
			"parent" : 285,
			"scale" : "1.00000 0.99999 0.99999"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 1.57080",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 294,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Baseline",
			"opaquebackground" : false,
			"origin" : "-440.83875 -82.31110 0.00000",
			"padding" : 0,
			"parent" : 313,
			"pointsize" : 5.0,
			"scale" : "1.05001 1.04999 1.05000",
			"size" : "75.00000 24.00000",
			"text" : "Baseline",
			"verticalalign" : "center"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 1.57080",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 319,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Jitter",
			"opaquebackground" : false,
			"origin" : "-95.55847 -82.31097 0.00000",
			"padding" : 0,
			"parent" : 313,
			"pointsize" : 5.0,
			"scale" : "1.05001 1.04999 1.05000",
			"size" : "43.00000 24.00000",
			"text" : "Jitter",
			"verticalalign" : "center"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 1.57080",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 327,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Velocity Influence",
			"opaquebackground" : false,
			"origin" : "279.13342 -34.63666 0.00000",
			"padding" : 0,
			"parent" : 313,
			"pointsize" : 5.0,
			"scale" : "1.05001 1.04999 1.05000",
			"size" : "151.00000 24.00000",
			"text" : "Velocity Influence",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 302,
			"name" : "Size Settings",
			"origin" : "-715.00061 24.88976 0.00000",
			"parent" : 512,
			"scale" : "1.66667 0.30297 0.79606"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 303,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Size",
			"opaquebackground" : false,
			"origin" : "-40.00000 0.00000 0.00000",
			"padding" : 0,
			"parent" : 302,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "43.00000 24.00000",
			"text" : "Size:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 305,
			"image" : "models/util/solidlayer.json",
			"name" : "Base Size Slider",
			"origin" : "173.04749 -3.80957 0.00000",
			"parent" : 303,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 306,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.brush_type != \"procedural\" && cb.stroke_type != \"stamp\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "size",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 305,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 311,
			"image" : "models/util/solidlayer.json",
			"name" : "Size Jitter Slider",
			"origin" : "487.46094 -4.00006 0.00000",
			"parent" : 302,
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 312,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.stroke_type != \"straight_line\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "size_jitter",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 311,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 314,
			"image" : "models/util/solidlayer.json",
			"name" : "Size Velocity Slider",
			"origin" : "858.90234 -4.00006 0.00000",
			"parent" : 302,
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 315,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.stroke_type != \"stamp\" && cb.stroke_type != \"straight_line\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "size_vel",
					"leftVal" : -1,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 314,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 563,
			"name" : "Alpha Settings",
			"origin" : "-715.00061 8.84102 0.00000",
			"parent" : 512,
			"scale" : "1.66667 0.30297 0.79606"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 564,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Alpha",
			"opaquebackground" : false,
			"origin" : "-40.00000 0.00000 0.00000",
			"padding" : 0,
			"parent" : 563,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "56.00000 24.00000",
			"text" : "Alpha:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 567,
			"image" : "models/util/solidlayer.json",
			"name" : "Alpha Jitter Slider",
			"origin" : "487.46094 -4.00006 0.00000",
			"parent" : 563,
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 568,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.stroke_type != \"straight_line\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "alpha_jitter",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 567,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 569,
			"image" : "models/util/solidlayer.json",
			"name" : "Alpha Velocity Slider",
			"origin" : "858.90234 -4.00006 0.00000",
			"parent" : 563,
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 570,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.stroke_type != \"stamp\" && cb.stroke_type != \"straight_line\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "alpha_vel",
					"leftVal" : -1,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 569,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 578,
			"name" : "Offset Settings",
			"origin" : "-715.00061 -7.20769 0.00000",
			"parent" : 512,
			"scale" : "1.66667 0.30297 0.79606"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 579,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Offset",
			"opaquebackground" : false,
			"origin" : 
			{
				"script" : "'use strict';\n\nvar hovered = false;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(hovered) {\n\t\tshared.tooltip = \"Offset the brush center perpendicular to the stroke direction\";\n\t}\n\treturn value;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}",
				"value" : "-40.00000 0.00000 0.00000"
			},
			"padding" : 0,
			"parent" : 578,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "57.00000 24.00000",
			"text" : "Offset:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 461,
			"image" : "models/util/solidlayer.json",
			"name" : "Base Offset Slider",
			"origin" : "96.27589 -4.00006 0.00000",
			"parent" : 578,
			"size" : "165.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 462,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.stroke_type != \"straight_line\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "offset",
					"leftVal" : -1,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 461,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar hovered = false;\nvar enabled = false;\nvar check;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.stroke_type != \"straight_line\";\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tcheck = thisLayer.getChildren()[0];\n\t\n\tfor(var i = 0; i < shared.brushEditor.texCnt; i++) {\n\t\tshared.currentBrush.tex[i][scriptProperties['key']] = 0;\n\t}\n\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\tif(hovered && enabled) {\n\t\tswitch(currentStatus()) {\n\t\t\tcase 0:\n\t\t\t\tshared.tooltip = \"Offset in one direction\";\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tshared.tooltip = \"Randomly select in which direction to offset\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tshared.tooltip = \"Offset in both directions\";\n\t\t\t\tbreak;\n\t\t\t\n\t\t}\n\t}\n\treturn enabled ? colorDefault : colorDisabled;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled && isVisible()) {\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = (shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] + 1) % 3;\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function currentStatus() {\n\treturn shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tvar status = currentStatus();\n\tcheck.visible = status > 0;\n\tcheck.alpha = status / 2.;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}",
				"scriptproperties" : 
				{
					"key" : "offset_mirror"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 454,
			"image" : "models/util/solidlayer.json",
			"name" : "Mirror",
			"origin" : "202.60596 -4.00000 0.00000",
			"parent" : 578,
			"size" : "23.00000 23.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 456,
			"image" : "models/util/solidlayer.json",
			"name" : "Check",
			"parent" : 454,
			"scale" : "0.61604 0.61604 0.61604",
			"size" : "23.00000 23.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 457,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "18.61926 2.56866 0.00000",
			"padding" : 0,
			"parent" : 454,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05002 1.05000",
			"size" : "52.00000 24.00000",
			"text" : "Mirror",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 582,
			"image" : "models/util/solidlayer.json",
			"name" : "Jitter Offset Slider",
			"origin" : "487.46094 -4.00006 0.00000",
			"parent" : 578,
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 583,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.stroke_type != \"straight_line\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "offset_jitter",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 582,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 584,
			"image" : "models/util/solidlayer.json",
			"name" : "Offset Velocity Slider",
			"origin" : "858.90234 -4.00006 0.00000",
			"parent" : 578,
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 585,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.stroke_type != \"stamp\" && cb.stroke_type != \"straight_line\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "offset_vel",
					"leftVal" : -1,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 584,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 593,
			"name" : "Rotation Settings",
			"origin" : "-715.00061 -23.25641 0.00000",
			"parent" : 512,
			"scale" : "1.66667 0.30297 0.79606"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 594,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Rotation",
			"opaquebackground" : false,
			"origin" : "-40.00000 0.00000 0.00000",
			"padding" : 0,
			"parent" : 593,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "78.00000 24.00000",
			"text" : "Rotation:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 595,
			"image" : "models/util/solidlayer.json",
			"name" : "Base Size Slider",
			"origin" : "173.04749 -3.80957 0.00000",
			"parent" : 594,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 596,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.brush_type != \"procedural\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "rot",
					"leftVal" : -1,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 595,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 597,
			"image" : "models/util/solidlayer.json",
			"name" : "Size Jitter Slider",
			"origin" : "487.46094 -4.00006 0.00000",
			"parent" : 593,
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 598,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.brush_type != 'procedural';\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\t\n\t\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? colorDefault : colorDisabled;\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "rot_jitter",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 597,
			"size" : "16.00000 32.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Key',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar enabled = false;\nvar check;\n\nvar colorDefault = new Vec3(1.0, 1.0, 1.0);\nvar colorDisabled = new Vec3(0.6, 0.6, 0.6);\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.brush_type != 'procedural' && cb.stroke_type != 'stamp';\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tcheck = thisLayer.getChildren()[0];\n\t\n\tfor(var i = 0; i < shared.brushEditor.texCnt; i++) {\n\t\tshared.currentBrush.tex[i][scriptProperties['key']] = true;\n\t}\n\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\treturn enabled ? colorDefault : colorDisabled;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(enabled && isVisible()) {\n\t\tshared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']] = !shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n\t\tshared['brushEditor']['changed'] = true;\t// enqueue event\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tcheck.visible = shared.currentBrush.tex[shared.brushEditor.texId][scriptProperties['key']];\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "rot_lock"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 613,
			"image" : "models/util/solidlayer.json",
			"name" : "Lock To Stroke Dir",
			"origin" : "710.60278 -13.30109 0.00000",
			"parent" : 593,
			"size" : "23.00000 23.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 354,
			"image" : "models/util/solidlayer.json",
			"name" : "Check",
			"parent" : 613,
			"scale" : "0.61604 0.61604 0.61604",
			"size" : "23.00000 23.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 609,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "",
			"opaquebackground" : false,
			"origin" : "18.61926 2.56866 0.00000",
			"padding" : 0,
			"parent" : 613,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05002 1.05000",
			"size" : "206.00000 24.00000",
			"text" : "Lock to Stroke Direction",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 316,
			"name" : "Velocity Bounds Settings",
			"origin" : "100.00000 -604.40918 0.00000",
			"parent" : 358
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 317,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Lower Bound",
			"opaquebackground" : false,
			"origin" : "111.14282 0.00000 0.00000",
			"padding" : 0,
			"parent" : 316,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "223.00000 24.00000",
			"text" : "Lower Velocity Threshold:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 320,
			"image" : "models/util/solidlayer.json",
			"name" : "Lo Vel Slider",
			"origin" : "135.77576 -3.80969 0.00000",
			"parent" : 317,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 321,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.stroke_type != \"stamp\" && cb.stroke_type != \"straight_line\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? new Vec3(1.0, 1.0 , 1.0) : new Vec3(0.7, 0.7 , 0.7);\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n",
				"scriptproperties" : 
				{
					"key" : "lo_vel",
					"leftVal" : 0,
					"rightVal" : 10
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 320,
			"size" : "16.00000 32.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "right",
			"id" : 328,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Upper Bound",
			"opaquebackground" : false,
			"origin" : "700.32727 0.00000 0.00000",
			"padding" : 0,
			"parent" : 316,
			"pointsize" : 5.0,
			"scale" : "1.05000 1.05000 1.05000",
			"size" : "223.00000 24.00000",
			"text" : "Upper Velocity Threshold:",
			"verticalalign" : "center"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 332,
			"image" : "models/util/solidlayer.json",
			"name" : "Hi Vel Slider",
			"origin" : "134.00000 -3.80957 0.00000",
			"parent" : 328,
			"scale" : "0.95238 0.95238 0.95238",
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 333,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar hovered = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\tvar cb = shared.currentBrush;\n\treturn cb.stroke_type != \"stamp\" && cb.stroke_type != \"straight_line\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\tif(hovered || grabbed) {\n\t\tshared.tooltip = toVal(range01).toPrecision(3);\n\t\tif(grabbed && !input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t}\n\t}\n\n\tthisLayer.color = enabled ? new Vec3(1.0, 1.0 , 1.0) : new Vec3(0.7, 0.7 , 0.7);\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = toR01(val);\n}\n\nexport function toR01(val) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn (val - minV) / (maxV - minV);\n}\n\nexport function toVal(r01) {\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\treturn r01 * (maxV - minV) + minV;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!isVisible()) {return;}\n\thovered = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\thovered = false;\n}\n",
				"scriptproperties" : 
				{
					"key" : "hi_vel",
					"leftVal" : 0,
					"rightVal" : 10
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 332,
			"size" : "16.00000 32.00000"
		},
		{
			"alignment" : "topleft",
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.96471 0.96471 0.96471",
			"id" : 856,
			"image" : "models/util/solidlayer.json",
			"name" : "Texture Selector",
			"origin" : 
			{
				"script" : "'use strict';\n\n// Created by Rusty\n\nexport var scriptProperties = createScriptProperties()\n    .addCheckbox({\n        name: 'isMovable',\n        label: 'Is movable',\n        value: false\n    })\n    .finish();\n\nconst storageName = \"storedPosOldSquareMIC\";\nlet isDragging = false;\nlet dragOffset;\n\nexport function cursorDown(event) {\n    isDragging = true;\n    dragOffset = thisLayer.origin.subtract(event.worldPosition);\n}\n\nexport function cursorUp(event) {\n    isDragging = false;\n    localStorage.set(storageName, thisLayer.origin);\n}\n\nexport function cursorMove(event) {\n    if (isDragging && scriptProperties.isMovable) {\n        thisLayer.origin = event.worldPosition.add(dragOffset);\n    }\n}\n\nexport function init() {\n    return localStorage.get(storageName) || thisLayer.origin;\n} \n",
				"scriptproperties" : 
				{
					"isMovable" : true
				},
				"value" : "1311.63928 931.29272 2.00000"
			},
			"scale" : "4.14173 0.23501 0.60000",
			"size" : "149.00000 256.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared.brushEditor.texEdit;\n}\n",
				"value" : true
			}
		},
		{
			"alignment" : "topleft",
			"castshadow" : false,
			"id" : 773,
			"image" : "models/Window2.json",
			"name" : "Window2",
			"origin" : 
			{
				"script" : "'use strict';\n\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"value" : "-16.64430 51.63330 0.00000"
			},
			"parent" : 856,
			"scale" : "0.14487 2.55308 1.66667",
			"size" : "1259.00000 1259.00000"
		},
		{
			"alignment" : "topleft",
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.96471 0.96471 0.96471",
			"id" : 775,
			"image" : "models/util/solidlayer.json",
			"name" : "Move Bar Visual",
			"parent" : 856,
			"size" : "149.00000 256.00000"
		},
		{
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "1.00000 1.00000 1.00000",
			"blockalign" : false,
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 778,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Window Title",
			"opaquebackground" : false,
			"origin" : "0.00000 -115.00000 0.00000",
			"padding" : 32,
			"parent" : 775,
			"pointsize" : 8.0,
			"scale" : "0.24144 4.25508 1.66667",
			"size" : "379.00000 38.00000",
			"text" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {String} value - for property 'text'\n * @return {String} - update current property value\n */\nexport function update(value) {\n\tlet be = shared.brushEditor;\n\treturn `Edit Texture ${be.texId + 1} | Page ${be.texPage + 1} / ${Math.ceil(be.texImgTotal / be.texPageSize)}`;\n}\n",
				"value" : "Edit Texture X | Page Y / Z"
			},
			"verticalalign" : "center"
		},
		{
			"alignment" : "bottomright",
			"angles" : "0.00000 0.00000 3.14159",
			"castshadow" : false,
			"id" : 776,
			"image" : "models/Next_2.json",
			"name" : "Previous_2",
			"origin" : 
			{
				"script" : "'use strict';\n\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tlet be = shared.brushEditor;\n\tlet pages = Math.ceil(be.texImgTotal / be.texPageSize);\n\tbe.texPage = (pages + be.texPage - 1) % pages;\n\tbe.changed = true;\n}\n",
				"value" : "105.00000 -12.00000 0.00000"
			},
			"parent" : 775,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"alignment" : "topleft",
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 777,
			"image" : "models/Next_2.json",
			"name" : "Next_2",
			"origin" : 
			{
				"script" : "'use strict';\n\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tlet be = shared.brushEditor;\n\tlet pages = Math.ceil(be.texImgTotal / be.texPageSize);\n\tbe.texPage = (be.texPage + 1) % pages;\n\tbe.changed = true;\n}\n",
				"value" : "120.00000 -12.00000 0.00000"
			},
			"parent" : 775,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"alignment" : "topleft",
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 784,
			"image" : "models/Close_2.json",
			"name" : "Close_2",
			"origin" : 
			{
				"script" : "'use strict';\n\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tshared.brushEditor.texEdit = !shared.brushEditor.texEdit;\n\tshared[\"cursorOnUi\"] = false;\n}\n",
				"value" : "135.00000 -12.00000 0.00000"
			},
			"parent" : 775,
			"scale" : "0.20593 3.62931 1.42154",
			"size" : "64.00000 64.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 866,
			"name" : "Content",
			"origin" : "0.00000 -370.00000 0.00000",
			"parent" : 856,
			"scale" : "0.24145 4.25514 1.66667",
			"visible" : 
			{
				"script" : "'use strict';\n\nvar template;\nvar textures;\nvar currentPage = -1; \n\nvar row = 4;\nvar col = 4;\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function init(value) {\n\tvar original = thisLayer.getChildren()[0];\n\ttemplate = JSON.stringify(buildTemplate(original));\n\t//console.log(template);\n\trecursiveDestroy(original);\n\n\ttextures = [];\n\tvar brush = thisScene.getInitialLayerConfig(thisScene.getLayer(\"Brush\"));\n\tfor(const effect of brush.effects) {\n\t\ttextures.push({name:effect.name, img:effect.passes[0].textures[1]});\n\t}\n\tshared.brushEditor.texImgTotal = textures.length;\n\tshared.brushEditor.texPageSize = row * col;\n\t//console.log(JSON.stringify(textures));\n\t\n\treturn value;\n}\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged && shared.texPage != currentPage) {\n\t\trefresh();\n\t}\n\treturn value;\n}\n\nexport function refresh() {\n\tfor(let i = thisLayer.getChildren().length - 1; i >= 0; i--) {\n\t\t// since deletion is deferrded i don't think we need to iterate in reverse, but I do so just in case...\n\t\trecursiveDestroy(thisLayer.getChildren()[i]);\n\t}\n\n\t\n\tlet offset = shared.brushEditor.texPage * row * col;\n\tfor(let y = 0; y < row; y++) {\n\t\tfor(let x = 0; x < col; x++) {\n\t\t\tlet i = offset + y * col + x;\n\t\t\tif(i >= textures.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar inst = JSON.parse(template);\n\t\t\tinst.layer[\"origin\"] = `${x * 150} ${y * -150} 0`; // set grid position\n\n\t\t\tvar prev = inst.children[1].layer;\n\t\t\tprev.effects[0].passes[0].textures[1] = textures[i].img; // set texture\n\t\t\tprev.origin.scriptproperties.texName = textures[i].name; // set data\n\n\t\t\t//console.log(JSON.stringify(inst));\n\t\t\tinstantiateTemplate(inst, thisLayer);\n\t\t}\n\t}\n\tcurrentPage = shared.brushEditor.texPage;\n}\n\n\nexport function buildTemplate(layer) {\n\tvar tmp = {\n\t\tlayer: thisScene.getInitialLayerConfig(layer),\n\t\tchildren: []\n\t};\n\n\tfor(const child of layer.getChildren()) {\n\t\ttmp.children.push(buildTemplate(child));\n\t}\n\treturn tmp;\n}\n\nexport function instantiateTemplate(template, parent) {\n\tvar l = thisScene.createLayer(template.layer);\n\tl.setParent(parent, false);\n\n\tfor(const child of template.children) {\n\t\tinstantiateTemplate(child, l);\n\t}\n\treturn l;\n}\n\nexport function recursiveDestroy(layer) {\n\tfor(var child of layer.getChildren()) {\n\t\trecursiveDestroy(child);\n\t}\n\tthisScene.destroyLayer(layer);\n}",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 644,
			"name" : "Texture Template",
			"parent" : 866
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 642,
			"image" : "models/util/solidlayer.json",
			"name" : "Highlight",
			"origin" : "64.00000 -64.00000 0.00000",
			"parent" : 644,
			"scale" : "150.00000 150.00000 1.00000",
			"size" : "1.00000 1.00000",
			"visible" : false
		},
		{
			"alignment" : "topleft",
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"effects" : 
			[
				{
					"file" : "effects/brush_texture/effect.json",
					"id" : 558,
					"name" : "",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Channel Mask" : "1 1 1 1",
								"channelMask" : "1 1 1 1"
							},
							"id" : 559,
							"textures" : [ null, "TestBrush" ]
						}
					],
					"visible" : true
				}
			],
			"id" : 623,
			"image" : "models/util/solidlayer.json",
			"name" : "Preview",
			"origin" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'texName',\n\t\tlabel: 'Texture Name',\n\t\tvalue: 'This is the default text.'\n\t})\n\t.finish();\n\nvar hovered = false;\nvar highlight;\n\n/**\n * Since this layer is instantiated dynamically, it could be that not all other relative layers we want to access have been created at the time init() is called.\n * So instead we call lazyInit whenever we actually want to access variables that should be initialized with init.\n */\nexport function lazyInit() {\n\tif(typeof highlight === \"undefined\") {\n\t\thighlight = thisLayer.getParent().getChildren()[0];\n\t}\n\tvar t = shared.currentBrush.tex[shared.brushEditor.texId];\n\tif(typeof t.images === \"undefined\") {\n\t\tt.images = [];\n\t}\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn value;\n}\n\nexport function refresh() {\n\tlazyInit();\n\tvar cb = shared.currentBrush;\n\tvar active = cb.tex[shared.brushEditor.texId].images.includes(scriptProperties.texName);\n\thighlight.visible = hovered || active;\n\thighlight.alpha = active ? 0.7 : 0.4;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tvar cb = shared.currentBrush;\n\tvar be = shared.brushEditor;\n\tvar imgs = cb.tex[be.texId].images;\n\n\tvar pos = imgs.indexOf(scriptProperties.texName);\n\tif(pos === -1) {\n\t\tcb.tex[be.texId].images.push(scriptProperties.texName);\n\t}else {\n\t\timgs.splice(pos, 1);\n\t}\n\tbe.changed = true;\n\n\trefresh();\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\thovered = true;\n\trefresh();\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\thovered = false;\n\trefresh();\n}",
				"scriptproperties" : 
				{
					"texName" : "This is the default text."
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 644,
			"size" : "128.00000 128.00000"
		},
		{
			"id" : 190,
			"name" : "Paint Controls",
			"origin" : "1280.00000 720.00000 3.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 171,
			"name" : "Tool Selection",
			"origin" : "1150.00000 400.00000 0.00000",
			"parent" : 190,
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared[\"showUi\"];\n}\n",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":0,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0},{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":0,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0}],\"size\":0.021824121475219727,\"alpha\":1,\"spacing\":0.1,\"hue\":0,\"saturation\":0,\"value\":0,\"hardness\":0.9280746579170227,\"lo_vel\":0,\"hi_vel\":3.4476423263549805,\"draw_mode\":\"paint\",\"stroke_type\":\"connected_lines\",\"brush_type\":\"procedural\"}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"alpha\",\"size\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 195,
			"image" : "models/Pen_small.json",
			"name" : "Pen",
			"origin" : "0.00000 200.00000 0.00000",
			"parent" : 171,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":0.5054068565368652,\"influence\":0.18118762969970703,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0.26494312286376953,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":true,\"offset\":0.1698323567708333,\"offset_mirror\":1,\"offset_jitter\":0,\"offset_vel\":0,\"images\":[\"Sprinkles Jaggy\",\"Cloud\"]},{\"probability\":0.43509435653686523,\"influence\":0.8921256065368652,\"size\":1,\"size_jitter\":0,\"size_vel\":-0.20794391632080078,\"alpha_jitter\":1,\"alpha_vel\":-0.1845073699951172,\"scatter_jitter\":0.39384889602661133,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":false,\"offset\":0.32740737452651514,\"offset_mirror\":1,\"offset_jitter\":1,\"offset_vel\":0,\"images\":[\"Sprinkles\",\"Cloud\"]}],\"size\":0.2093242108821869,\"alpha\":0.5422885417938232,\"spacing\":0.1,\"hue\":0.5892025573430383,\"saturation\":1,\"value\":0.2784300148487091,\"hardness\":0.1,\"lo_vel\":0,\"hi_vel\":5,\"draw_mode\":\"paint\",\"stroke_type\":\"evenly_spaced\",\"brush_type\":\"textures\",\"pat\":[]}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"size\",\"alpha\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 325,
			"image" : "models/Brush2@0.5x.json",
			"name" : "Paint Brush",
			"parent" : 171,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":0,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0},{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":0,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0}],\"size\":0.04916787147521973,\"alpha\":1,\"spacing\":0.1,\"hue\":0.5892025573430383,\"saturation\":1,\"value\":0.2784300148487091,\"hardness\":0.8772933483123779,\"lo_vel\":0,\"hi_vel\":3.4476423263549805,\"draw_mode\":\"paint\",\"stroke_type\":\"straight_line\",\"brush_type\":\"procedural\"}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"size\",\"alpha\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 239,
			"image" : "models/LineTool@0.5x.json",
			"name" : "Line Tool",
			"origin" : "0.00000 -200.00000 0.00000",
			"parent" : 171,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":0,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0},{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":0,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0}],\"size\":0.1494196355342865,\"alpha\":1,\"spacing\":0.1,\"hue\":0.1,\"saturation\":0.1,\"value\":0.1,\"hardness\":0.8226058483123779,\"lo_vel\":0,\"hi_vel\":3.4476423263549805,\"draw_mode\":\"erase\",\"stroke_type\":\"connected_lines\",\"brush_type\":\"procedural\"}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"size\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 200,
			"image" : "models/Erase_small.json",
			"name" : "Eraser",
			"origin" : "0.00000 -400.00000 0.00000",
			"parent" : 171,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tvar c = thisLayer.getChildren()[0];\n\tc.visible = !c.visible;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n}",
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 233,
			"image" : "models/More@0.5x.json",
			"name" : "More",
			"origin" : "0.00000 -600.00000 0.00000",
			"parent" : 171,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 628,
			"name" : "",
			"origin" : "-350.00000 0.00000 0.00000",
			"parent" : 233,
			"visible" : false
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":-0.7391929626464844,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":0,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0},{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0.39384889602661133,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":0,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0}],\"size\":0.1,\"alpha\":1,\"spacing\":0.1,\"hue\":0.7288561761379242,\"saturation\":1,\"value\":0.2515006959438324,\"hardness\":1,\"lo_vel\":0,\"hi_vel\":3.4476423263549805,\"draw_mode\":\"paint\",\"stroke_type\":\"connected_lines\",\"brush_type\":\"procedural\"}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"size\",\"alpha\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 208,
			"image" : "models/InkPen@0.5x.json",
			"name" : "Ink Pen",
			"origin" : "0.00000 1600.00000 0.00000",
			"parent" : 628,
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":0.5054068565368652,\"influence\":0.6030631065368652,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0.26494312286376953,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":true,\"offset\":0.00013543331261844926,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0,\"images\":[\"Watercolor\"]},{\"probability\":0.43509435653686523,\"influence\":0.8921256065368652,\"size\":1,\"size_jitter\":0,\"size_vel\":-0.8095054626464844,\"alpha_jitter\":1,\"alpha_vel\":0,\"scatter_jitter\":0.39384889602661133,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":false,\"offset\":0.32740737452651514,\"offset_mirror\":1,\"offset_jitter\":1,\"offset_vel\":0,\"images\":[\"Sprinkles\"]}],\"size\":0.27734375,\"alpha\":0.9954135417938232,\"spacing\":0.060094356536865234,\"hue\":0.5892025573430383,\"saturation\":1,\"value\":0.2784300148487091,\"hardness\":0.40234375,\"lo_vel\":0,\"hi_vel\":5,\"draw_mode\":\"blend\",\"stroke_type\":\"evenly_spaced\",\"brush_type\":\"textures\",\"pat\":[\"Freeze while Painting\",\"Canvas Copy\",\"Colored Noise\"],\"blend_with_color\":true}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"size\",\"alpha\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 755,
			"image" : "models/Brush_small.json",
			"name" : "Watercolor Brush",
			"origin" : "0.00000 800.00000 0.00000",
			"parent" : 628,
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":0,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0.26494312286376953,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0,\"images\":[]},{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":1,\"alpha_vel\":0,\"scatter_jitter\":0.39384889602661133,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":false,\"offset\":0.1801876183712121,\"offset_mirror\":1,\"offset_jitter\":1,\"offset_vel\":0,\"images\":[\"Sprinkles\"]}],\"size\":0.15000001,\"alpha\":0.5,\"spacing\":0.1,\"hue\":0.1,\"saturation\":0.1,\"value\":0.1,\"hardness\":0.1,\"lo_vel\":0,\"hi_vel\":5,\"draw_mode\":\"paint\",\"stroke_type\":\"spray_can\",\"brush_type\":\"textures\"}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"size\",\"alpha\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 109,
			"image" : "models/Spray@0.5x.json",
			"name" : "Air Brush",
			"origin" : "0.00000 1200.00000 0.00000",
			"parent" : 628,
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":0.5054068565368652,\"influence\":0.6030631065368652,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0.26494312286376953,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":true,\"offset\":0.00013543331261844926,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0,\"images\":[\"Watercolor\"]},{\"probability\":0.43509435653686523,\"influence\":0.8921256065368652,\"size\":1,\"size_jitter\":0,\"size_vel\":-0.8095054626464844,\"alpha_jitter\":1,\"alpha_vel\":0,\"scatter_jitter\":0.39384889602661133,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":false,\"offset\":0.32740737452651514,\"offset_mirror\":1,\"offset_jitter\":1,\"offset_vel\":0,\"images\":[\"Sprinkles\"]}],\"size\":0.27734375,\"alpha\":0.9954135417938232,\"spacing\":0.060094356536865234,\"hue\":0.5892025573430383,\"saturation\":1,\"value\":0.2784300148487091,\"hardness\":0.40234375,\"lo_vel\":0,\"hi_vel\":5,\"draw_mode\":\"blend\",\"stroke_type\":\"evenly_spaced\",\"brush_type\":\"procedural\",\"pat\":[\"Fabric Pattern\",\"Tint with Brush Color\"],\"blend_with_color\":true}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"size\",\"alpha\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 193,
			"image" : "models/PaintRoller@0.5x.json",
			"name" : "Color Copy Brush",
			"origin" : "-350.00000 800.00000 0.00000",
			"parent" : 628,
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":0,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0},{\"probability\":1,\"influence\":1,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":0,\"rot_lock\":true,\"offset\":0,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0}],\"size\":0.2015114724636078,\"alpha\":0.5579133033752441,\"spacing\":0,\"hue\":0.7288561761379242,\"saturation\":1,\"value\":0.2515006959438324,\"hardness\":0,\"lo_vel\":0,\"hi_vel\":3.4476423263549805,\"draw_mode\":\"smear\",\"stroke_type\":\"spray_can\",\"brush_type\":\"procedural\"}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"size\",\"alpha\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 257,
			"image" : "models/smear@0.5x.json",
			"name" : "Smear",
			"origin" : "0.00000 400.00000 0.00000",
			"parent" : 628,
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 696,
			"image" : "models/BrushEditor@0.5x.json",
			"name" : "Toggle Brush Editor",
			"origin" : 
			{
				"script" : "'use strict';\n\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorClick(event) {\n\tif(!isVisible()) {return;}\n\tshared.brushEditor.visible = !shared.brushEditor.visible;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 628,
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":0.5054068565368652,\"influence\":0.18118762969970703,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0.26494312286376953,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":true,\"offset\":0.00013543331261844926,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0,\"images\":[]},{\"probability\":0.43509435653686523,\"influence\":0.8921256065368652,\"size\":1,\"size_jitter\":0,\"size_vel\":-0.8095054626464844,\"alpha_jitter\":1,\"alpha_vel\":0,\"scatter_jitter\":0.39384889602661133,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":false,\"offset\":0.32740737452651514,\"offset_mirror\":1,\"offset_jitter\":1,\"offset_vel\":0,\"images\":[]}],\"size\":0.2093242108821869,\"alpha\":0.29228782653808594,\"spacing\":0.1,\"hue\":0.5892025573430383,\"saturation\":1,\"value\":0.2784300148487091,\"hardness\":0.40234375,\"lo_vel\":0,\"hi_vel\":5,\"draw_mode\":\"blend\",\"stroke_type\":\"spray_can\",\"brush_type\":\"procedural\",\"pat\":[\"Canvas Copy\",\"Blur\"]}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"size\",\"alpha\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 816,
			"image" : "models/BrushBlur@0.5x.json",
			"name" : "Blur Brush",
			"origin" : "-350.00000 1600.00000 0.00000",
			"parent" : 628,
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Effect Json',\n\t\tvalue: '{\"info\":\"Put the json-brush data of a brush using the same pattern-texture-setup, that you want to apply to the entire canvas, here.\"}'\n\t})\n\t.finish();\n\nconst State = Object.freeze({\n\tIdle: 0,\n\tPrepareBrush: 1,\n\tApplyEffect:2,\n\tReset:3\n});\n\nvar state = State.Idle;\nvar pattern;\nvar currPat;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpattern = JSON.parse(scriptProperties[\"brush\"]).pat;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tswitch(state) {\n\t\tcase State.Idle:\n\t\t\tbreak;\n\t\tcase State.PrepareBrush:\n\t\t\tvar cb = shared.currentBrush;\n\t\t\tcurrPat = cb.pat;\n\t\t\tcb.pat = pattern;\n\t\t\tshared.brushEditor.changed = true;\n\t\t\tstate = State.ApplyEffect;\n\t\t\tbreak;\n\t\tcase State.ApplyEffect:\n\t\t\tshared.cmd = \"blend\";\n\t\t\tstate = State.Reset;\n\t\t\tbreak;\n\t\tcase State.Reset:\n\t\t\tshared.currentBrush.pat = currPat;\n\t\t\tshared.brushEditor.changed = true;\n\t\t\tstate = State.Idle;\n\t\t\tbreak;\n\t}\n\treturn value;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible() || state !== State.Idle) {return;}\n\tstate = State.PrepareBrush;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}\n",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":0.5054068565368652,\"influence\":0.18118762969970703,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0.26494312286376953,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":true,\"offset\":0.00013543331261844926,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0,\"images\":[]},{\"probability\":0.43509435653686523,\"influence\":0.8921256065368652,\"size\":1,\"size_jitter\":0,\"size_vel\":-0.8095054626464844,\"alpha_jitter\":1,\"alpha_vel\":0,\"scatter_jitter\":0.39384889602661133,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":false,\"offset\":0.32740737452651514,\"offset_mirror\":1,\"offset_jitter\":1,\"offset_vel\":0,\"images\":[]}],\"size\":0.2093242108821869,\"alpha\":0.29228782653808594,\"spacing\":0.1,\"hue\":0.5892025573430383,\"saturation\":1,\"value\":0.2784300148487091,\"hardness\":0.40234375,\"lo_vel\":0,\"hi_vel\":5,\"draw_mode\":\"blend\",\"stroke_type\":\"spray_can\",\"brush_type\":\"procedural\",\"pat\":[\"Canvas Copy\",\"Blur\"]}"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 629,
			"image" : "models/CanvasBlur@0.5x.json",
			"name" : "Blur Canvas",
			"origin" : "-700.00000 1600.00000 0.00000",
			"parent" : 628,
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Brush Json',\n\t\tvalue: '{\"info\":\"Put the json output of a brush you designed with the brush designer here. The printer button in the designer logs the brushes json data so you can copy-paste it.\"}'\n\t})\n\t.addText({\n\t\tname: 'ignored',\n\t\tlabel: 'Ignored Fields',\n\t\tvalue: '[\"Here you can list brush properties that are allowed to change while the brush still counts as selected. Some examples follow:\",\"hue\",\"saturation\",\"value\",\"size\",\"alpha\",\"hardness\"]'\n\t})\n\t.finish();\n\nvar selected = false;\nvar brush = {};\nvar isPartial = false;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tbrush = JSON.parse(scriptProperties.brush);\n\tfor(const param of JSON.parse(scriptProperties.ignored)) {\n\t\tdelete brush[param];\n\t}\n\tisPartial = JSON.parse(scriptProperties.ignored.length) > 0;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared.brushEditor.hasChanged) {\n\t\trefresh();\n\t}\n\treturn selected ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (obj1 == null || typeof obj1 !== \"object\" || obj2 == null || typeof obj2 !== \"object\") {\n        return false;\n    }\n\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tselected = true;\n\tfor(const [key, val] of Object.entries(brush)) {\n\t\tif(!deepEqual(cb[key], val)) {\n\t\t\tselected = false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tif(isPartial) {\n\t\tfor(var [key, val] of Object.entries(brush)) {\n\t\t\tshared.currentBrush[key] = JSON.parse(JSON.stringify(val));\n\t\t}\n\t}else {\n\t\tshared.currentBrush = JSON.parse(JSON.stringify(brush));\n\t}\n\tshared.brushEditor.changed = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":0.5054068565368652,\"influence\":0.18118762969970703,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0.26494312286376953,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":true,\"offset\":0.00013543331261844926,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0,\"images\":[]},{\"probability\":0.43509435653686523,\"influence\":0.8921256065368652,\"size\":1,\"size_jitter\":0,\"size_vel\":-0.8095054626464844,\"alpha_jitter\":1,\"alpha_vel\":0,\"scatter_jitter\":0.39384889602661133,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":false,\"offset\":0.32740737452651514,\"offset_mirror\":1,\"offset_jitter\":1,\"offset_vel\":0,\"images\":[]}],\"size\":0.2093242108821869,\"alpha\":0.29228782653808594,\"spacing\":0.1,\"hue\":0.5892025573430383,\"saturation\":1,\"value\":0.2784300148487091,\"hardness\":0.40234375,\"lo_vel\":0,\"hi_vel\":5,\"draw_mode\":\"blend\",\"stroke_type\":\"spray_can\",\"brush_type\":\"procedural\",\"pat\":[\"Canvas Copy\",\"Sharpen\"]}",
					"ignored" : "[\"hue\",\"saturation\",\"value\",\"size\",\"alpha\"]"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 818,
			"image" : "models/BrushSharpen@0.5x.json",
			"name" : "Sharpen Brush",
			"origin" : "-350.00000 1200.00000 0.00000",
			"parent" : 628,
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'brush',\n\t\tlabel: 'Effect Json',\n\t\tvalue: '{\"info\":\"Put the json-brush data of a brush using the same pattern-texture-setup, that you want to apply to the entire canvas, here.\"}'\n\t})\n\t.finish();\n\nconst State = Object.freeze({\n\tIdle: 0,\n\tPrepareBrush: 1,\n\tApplyEffect:2,\n\tReset:3\n});\n\nvar state = State.Idle;\nvar pattern;\nvar currPat;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpattern = JSON.parse(scriptProperties[\"brush\"]).pat;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tswitch(state) {\n\t\tcase State.Idle:\n\t\t\tbreak;\n\t\tcase State.PrepareBrush:\n\t\t\tvar cb = shared.currentBrush;\n\t\t\tcurrPat = cb.pat;\n\t\t\tcb.pat = pattern;\n\t\t\tshared.brushEditor.changed = true;\n\t\t\tstate = State.ApplyEffect;\n\t\t\tbreak;\n\t\tcase State.ApplyEffect:\n\t\t\tshared.cmd = \"blend\";\n\t\t\tstate = State.Reset;\n\t\t\tbreak;\n\t\tcase State.Reset:\n\t\t\tshared.currentBrush.pat = currPat;\n\t\t\tshared.brushEditor.changed = true;\n\t\t\tstate = State.Idle;\n\t\t\tbreak;\n\t}\n\treturn value;\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible() || state !== State.Idle) {return;}\n\tstate = State.PrepareBrush;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}\n",
				"scriptproperties" : 
				{
					"brush" : "{\"tex\":[{\"probability\":0.5054068565368652,\"influence\":0.18118762969970703,\"size\":1,\"size_jitter\":0,\"size_vel\":0,\"alpha_jitter\":0,\"alpha_vel\":0,\"scatter_jitter\":0.26494312286376953,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":true,\"offset\":0.00013543331261844926,\"offset_mirror\":0,\"offset_jitter\":0,\"offset_vel\":0,\"images\":[]},{\"probability\":0.43509435653686523,\"influence\":0.8921256065368652,\"size\":1,\"size_jitter\":0,\"size_vel\":-0.8095054626464844,\"alpha_jitter\":1,\"alpha_vel\":0,\"scatter_jitter\":0.39384889602661133,\"scatter_vel\":0,\"rot\":0,\"rot_jitter\":1,\"rot_lock\":false,\"offset\":0.32740737452651514,\"offset_mirror\":1,\"offset_jitter\":1,\"offset_vel\":0,\"images\":[]}],\"size\":0.2093242108821869,\"alpha\":0.29228782653808594,\"spacing\":0.1,\"hue\":0.5892025573430383,\"saturation\":1,\"value\":0.2784300148487091,\"hardness\":0.40234375,\"lo_vel\":0,\"hi_vel\":5,\"draw_mode\":\"blend\",\"stroke_type\":\"spray_can\",\"brush_type\":\"procedural\",\"pat\":[\"Canvas Copy\",\"Sharpen\"]}"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 641,
			"image" : "models/CanvasSharpen@0.5x.json",
			"name" : "Sharpen Canvas",
			"origin" : "-700.00000 1200.00000 0.00000",
			"parent" : 628,
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Property',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.addCheckbox({\n\t\tname: 'isDefault',\n\t\tlabel: 'Default Option on Startup',\n\t\tvalue: false\n\t})\n\t.finish();\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tif(scriptProperties[\"isDefault\"]) {\n\t\tshared[scriptProperties[\"key\"]] = scriptProperties[\"val\"];\n\t}\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\treturn shared[scriptProperties[\"key\"]] == scriptProperties[\"val\"] ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tshared[scriptProperties[\"key\"]] = scriptProperties[\"val\"];\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n}",
				"scriptproperties" : 
				{
					"isDefault" : false,
					"key" : "cmd",
					"val" : "undo"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 287,
			"image" : "models/Undo@0.5x.json",
			"name" : "Undo",
			"origin" : "-175.00000 -800.00000 0.00000",
			"parent" : 171,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Property',\n\t\tvalue: 'foo'\n\t})\n\t.addText({\n\t\tname: 'val',\n\t\tlabel: 'Value',\n\t\tvalue: 'bar'\n\t})\n\t.addCheckbox({\n\t\tname: 'isDefault',\n\t\tlabel: 'Default Option on Startup',\n\t\tvalue: false\n\t})\n\t.finish();\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tif(scriptProperties[\"isDefault\"]) {\n\t\tshared[scriptProperties[\"key\"]] = scriptProperties[\"val\"];\n\t}\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\treturn shared[scriptProperties[\"key\"]] == scriptProperties[\"val\"] ? new Vec3(0., 1., 0.) : new Vec3(1., 1., 1.);\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tshared[scriptProperties[\"key\"]] = scriptProperties[\"val\"];\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n}",
				"scriptproperties" : 
				{
					"isDefault" : true,
					"key" : "cmd",
					"val" : "reset"
				},
				"value" : "1.00000 1.00000 1.00000"
			},
			"id" : 216,
			"image" : "models/Reset_small.json",
			"name" : "Reset",
			"origin" : "0.00000 -800.00000 0.00000",
			"parent" : 171,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 345,
			"name" : "Tool Options",
			"origin" : "-1000.00000 -600.00000 0.00000",
			"parent" : 190,
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared[\"showUi\"];\n}\n",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 191,
			"image" : "models/util/solidlayer.json",
			"name" : "Radius Slider",
			"parent" : 345,
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 120,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"parent" : 191,
			"size" : "250.00000 2.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 154,
			"image" : "models/Scale@0.15x.json",
			"name" : "Scale@0.15x",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\treturn true;\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tthisLayer.getParent().visible = enabled;\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = (val - minV) / (maxV - minV);\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "size",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 191,
			"size" : "77.00000 77.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 615,
			"image" : "models/util/solidlayer.json",
			"name" : "Alpha Slider",
			"origin" : "400.00000 0.00000 0.00000",
			"parent" : 345,
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 255,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"parent" : 615,
			"size" : "250.00000 2.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 162,
			"image" : "models/Alpha@0.15x.json",
			"name" : "Alpha@0.15x",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\treturn true;\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tthisLayer.getParent().visible = enabled;\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = (val - minV) / (maxV - minV);\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "alpha",
					"leftVal" : 0.001,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 615,
			"size" : "77.00000 77.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 207,
			"image" : "models/util/solidlayer.json",
			"name" : "Feather Slider",
			"origin" : "800.00000 0.00000 0.00000",
			"parent" : 345,
			"size" : "256.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 199,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"parent" : 207,
			"size" : "250.00000 2.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 158,
			"image" : "models/Hardness@0.15x.json",
			"name" : "Hardness@0.15x",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\treturn shared['currentBrush']['brush_type'] === \"procedural\";\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\tthisLayer.getParent().visible = enabled;\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = (val - minV) / (maxV - minV);\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "hardness",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 207,
			"size" : "77.00000 77.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 177,
			"name" : "Color Pickers",
			"origin" : "1200.00000 0.00000 0.00000",
			"parent" : 345,
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\tvar cb = shared.currentBrush;\n\treturn cb.draw_mode === \"paint\" || (cb.draw_mode === \"blend\" && cb.blend_with_color === true);\n}",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 346,
			"image" : "models/util/solidlayer.json",
			"name" : "BW Slider",
			"parent" : 177,
			"size" : "256.00000 8.00000",
			"visible" : false
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 261,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"parent" : 346,
			"size" : "250.00000 2.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 211,
			"image" : "models/Brightness@0.15x.json",
			"name" : "Height@0.15x",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\treturn true;\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = (val - minV) / (maxV - minV);\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "value",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 346,
			"size" : "77.00000 77.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 186,
			"name" : "HSV Picker",
			"origin" : "120.00000 0.00000 0.00000",
			"parent" : 177,
			"visible" : false
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 213,
			"image" : "models/util/solidlayer.json",
			"name" : "V Slider",
			"parent" : 186,
			"size" : "512.00000 8.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"id" : 266,
			"image" : "models/util/solidlayer.json",
			"name" : "Solid",
			"parent" : 213,
			"size" : "506.00000 2.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 214,
			"image" : "models/Brightness@0.15x.json",
			"name" : "Value",
			"origin" : 
			{
				"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\n\nexport var scriptProperties = createScriptProperties()\n\t.addSlider({\n\t\tname: 'leftVal',\n\t\tlabel: 'Left Value',\n\t\tvalue: 0,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addSlider({\n\t\tname: 'rightVal',\n\t\tlabel: 'Right Value',\n\t\tvalue: 1,\n\t\tmin: -100,\n\t\tmax: 100,\n\t\tinteger: false\n\t})\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Setting Name',\n\t\tvalue: 'foo'\n\t})\n\t.finish();\n\nvar grabbed = false;\nvar enabled = false;\nvar pxSize;\nvar range01;\n\nexport function shouldEnable() {\n\treturn true;\n}\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tpxSize = thisLayer.getParent().size.x;\n\trefresh();\n\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\treturn new Vec3(\n\t\t(range01 - 0.5) * pxSize,\n\t\tvalue.y,\n\t\tvalue.z\n\t);\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible() || !enabled) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t\n\n\t\tshared['currentBrush'][scriptProperties['key']] = WEMath.mix(\n\t\t\tscriptProperties['leftVal'],\n\t\t\tscriptProperties['rightVal'],\n\t\t\t(xpos / pxSize) + 0.5\n\t\t);\n\t\tshared['brushEditor']['changed'] = true;\n\t}\n}\n\nexport function refresh() {\n\tenabled = shouldEnable();\n\t\n\tvar val = shared['currentBrush'][scriptProperties['key']];\n\tvar minV = scriptProperties['leftVal'];\n\tvar maxV = scriptProperties['rightVal'];\n\n\tval = clamp(val, minV, maxV);\n\tshared['currentBrush'][scriptProperties['key']] = val;\n\n\trange01 = (val - minV) / (maxV - minV);\n}\n\n",
				"scriptproperties" : 
				{
					"key" : "value",
					"leftVal" : 0,
					"rightVal" : 1
				},
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 213,
			"size" : "77.00000 77.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"effects" : 
			[
				{
					"file" : "effects/hsv_preview_2d/effect.json",
					"id" : 180,
					"name" : "",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Hue / Saturation" : 
								{
									"script" : "'use strict';\n\nimport * as WEMath from 'WEMath';\nimport * as WEColor from 'WEColor';\n\nvar grabbed = false;\nvar pxSize;\n\nvar prev;\n\nfunction clamp(val, a, b) {\n\treturn Math.min(\n\t\tMath.max(\n\t\t\tval,\n\t\t\tMath.min(a,b)\n\t\t),\n\t\tMath.max(a,b)\n\t);\n}\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction getHsv() {\n\tvar cb = shared.currentBrush;\n\treturn new Vec3(cb.hue, cb.saturation, cb.value);\n}\n\n/**\n * @param {Vec2} value - for property 'Hue / Saturation'\n * @return {Vec2} - update current property value\n */\nexport function init(value) {\n\tprev = getHsv();\n\tpxSize = thisLayer.size;\n\n\treturn value;\n}\n\n/**\n * @param {Vec2} value - for property 'Hue / Saturation'\n * @return {Vec2} - update current property value\n */\nexport function update(value) {\n\tif(!isVisible()) {\n\t\treturn new Vec2(prev.x, prev.y);\n\t}\n\tvar hsv = getHsv();\n\n\tif(prev != hsv) {\n\t\tprev = hsv;\n\t}\n\t\n\treturn new Vec2(hsv.x, hsv.y);\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n\t\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorDown(event) {\n\tif(!isVisible()) {return;}\n\tgrabbed = true;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorMove(event) {\n\tif(!isVisible()) {return;}\n\tif(grabbed) {\n\t\tif(!input.cursorLeftDown) {\n\t\t\tgrabbed = false;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar hsv = new Vec3(\n\t\t\tclamp(event.localPosition.x / pxSize.x, 0, 1),\n\t\t\tclamp(1. - event.localPosition.y / pxSize.y, 0., 1),\n\t\t\tprev.z\n\t\t);\n\t\tprev = hsv;\n\n\t\t//var xpos = clamp(thisLayer.origin.x - thisLayer.size.x / 2. + event.localPosition.x, pxSize/2., -pxSize/2.);\n\t\t//var val = (xpos / pxSize) + 0.5;\n\t\tvar cb = shared.currentBrush;\n\t\tcb.hue = hsv.x;\n\t\tcb.saturation = hsv.y;\n\t\tcb.value = hsv.z;\n\t}\n}\n",
									"value" : "0.50000 0.50000"
								},
								"My new linked sliders" : "0.5 0.5",
								"Selection Rim" : 0.38,
								"Selection Size" : 0.027000001,
								"Value" : 
								{
									"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'Draw Radius'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\treturn shared.currentBrush[\"value\"];\n}\n",
									"value" : 1
								}
							},
							"id" : 183
						}
					],
					"visible" : true
				}
			],
			"id" : 178,
			"image" : "models/util/solidlayer.json",
			"name" : "HS Selection",
			"origin" : "0.00000 200.00000 0.00000",
			"parent" : 186,
			"size" : "512.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 174,
			"name" : "Sample Colors",
			"origin" : "120.00000 0.00000 0.00000",
			"parent" : 177
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "1.00000 0.92549 0.31765",
			"id" : 185,
			"image" : "models/util/solidlayer.json",
			"name" : "ColorBttn A",
			"origin" : "-150.00000 0.00000 0.00000",
			"parent" : 174,
			"size" : "80.00000 80.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nimport * as WEColor from 'WEColor';\n\nexport var scriptProperties = createScriptProperties()\n\t.addColor({\n\t\tname: 'onColor',\n\t\tlabel: 'Frame Color When Selected',\n\t\tvalue: new Vec3(0.25, 0.25, 0.25)\n\t})\n\t.finish();\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction myColor() {\n\treturn WEColor.rgb2hsv(thisLayer.getParent().color);\n}\n\nvar offColor;\nvar selected;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\toffColor = value;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\treturn selected ? scriptProperties[\"onColor\"] : offColor;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tvar cb = shared.currentBrush;\n\tvar col = myColor();\n\n\tcb.hue = col.x;\n\tcb.saturation = col.y;\n\tcb.value = col.z;\n\n\tshared.brushEditor.changed = true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tvar col = myColor();\n\tselected = (cb.hue === col.x && cb.saturation === col.y && cb.value === col.z);\n}",
				"scriptproperties" : 
				{
					"onColor" : "0.09019607843137255 0.09019607843137255 0.09019607843137255"
				},
				"value" : "0.18824 0.18824 0.18824"
			},
			"id" : 179,
			"image" : "models/ColorBtnFrame@0.5x.json",
			"name" : "ColorBtnFrame@0.5x",
			"parent" : 185,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.94510 0.31765 0.32157",
			"id" : 188,
			"image" : "models/util/solidlayer.json",
			"name" : "ColorBttn B",
			"parent" : 174,
			"size" : "80.00000 80.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nimport * as WEColor from 'WEColor';\n\nexport var scriptProperties = createScriptProperties()\n\t.addColor({\n\t\tname: 'onColor',\n\t\tlabel: 'Frame Color When Selected',\n\t\tvalue: new Vec3(0.25, 0.25, 0.25)\n\t})\n\t.finish();\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction myColor() {\n\treturn WEColor.rgb2hsv(thisLayer.getParent().color);\n}\n\nvar offColor;\nvar selected;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\toffColor = value;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\treturn selected ? scriptProperties[\"onColor\"] : offColor;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tvar cb = shared.currentBrush;\n\tvar col = myColor();\n\n\tcb.hue = col.x;\n\tcb.saturation = col.y;\n\tcb.value = col.z;\n\n\tshared.brushEditor.changed = true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tvar col = myColor();\n\tselected = (cb.hue === col.x && cb.saturation === col.y && cb.value === col.z);\n}",
				"scriptproperties" : 
				{
					"onColor" : "0.09019607843137255 0.09019607843137255 0.09019607843137255"
				},
				"value" : "0.18824 0.18824 0.18824"
			},
			"id" : 189,
			"image" : "models/ColorBtnFrame@0.5x.json",
			"name" : "ColorBtnFrame@0.5x",
			"parent" : 188,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.12941 0.27843",
			"id" : 196,
			"image" : "models/util/solidlayer.json",
			"name" : "ColorBttn C",
			"origin" : "150.00000 0.00000 0.00000",
			"parent" : 174,
			"size" : "80.00000 80.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nimport * as WEColor from 'WEColor';\n\nexport var scriptProperties = createScriptProperties()\n\t.addColor({\n\t\tname: 'onColor',\n\t\tlabel: 'Frame Color When Selected',\n\t\tvalue: new Vec3(0.25, 0.25, 0.25)\n\t})\n\t.finish();\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction myColor() {\n\treturn WEColor.rgb2hsv(thisLayer.getParent().color);\n}\n\nvar offColor;\nvar selected;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\toffColor = value;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\treturn selected ? scriptProperties[\"onColor\"] : offColor;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tvar cb = shared.currentBrush;\n\tvar col = myColor();\n\n\tcb.hue = col.x;\n\tcb.saturation = col.y;\n\tcb.value = col.z;\n\n\tshared.brushEditor.changed = true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tvar col = myColor();\n\tselected = (cb.hue === col.x && cb.saturation === col.y && cb.value === col.z);\n}",
				"scriptproperties" : 
				{
					"onColor" : "0.09019607843137255 0.09019607843137255 0.09019607843137255"
				},
				"value" : "0.18824 0.18824 0.18824"
			},
			"id" : 197,
			"image" : "models/ColorBtnFrame@0.5x.json",
			"name" : "ColorBtnFrame@0.5x",
			"parent" : 196,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.46667 0.46275 0.73725",
			"id" : 204,
			"image" : "models/util/solidlayer.json",
			"name" : "ColorBttn D",
			"origin" : "300.00000 0.00000 0.00000",
			"parent" : 174,
			"size" : "80.00000 80.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nimport * as WEColor from 'WEColor';\n\nexport var scriptProperties = createScriptProperties()\n\t.addColor({\n\t\tname: 'onColor',\n\t\tlabel: 'Frame Color When Selected',\n\t\tvalue: new Vec3(0.25, 0.25, 0.25)\n\t})\n\t.finish();\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction myColor() {\n\treturn WEColor.rgb2hsv(thisLayer.getParent().color);\n}\n\nvar offColor;\nvar selected;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\toffColor = value;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\treturn selected ? scriptProperties[\"onColor\"] : offColor;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tvar cb = shared.currentBrush;\n\tvar col = myColor();\n\n\tcb.hue = col.x;\n\tcb.saturation = col.y;\n\tcb.value = col.z;\n\n\tshared.brushEditor.changed = true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tvar col = myColor();\n\tselected = (cb.hue === col.x && cb.saturation === col.y && cb.value === col.z);\n}",
				"scriptproperties" : 
				{
					"onColor" : "0.09019607843137255 0.09019607843137255 0.09019607843137255"
				},
				"value" : "0.18824 0.18824 0.18824"
			},
			"id" : 205,
			"image" : "models/ColorBtnFrame@0.5x.json",
			"name" : "ColorBtnFrame@0.5x",
			"parent" : 204,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.51765 0.70980 0.62353",
			"id" : 210,
			"image" : "models/util/solidlayer.json",
			"name" : "ColorBttn E",
			"origin" : "450.00000 0.00000 0.00000",
			"parent" : 174,
			"size" : "80.00000 80.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : 
			{
				"script" : "'use strict';\n\nimport * as WEColor from 'WEColor';\n\nexport var scriptProperties = createScriptProperties()\n\t.addColor({\n\t\tname: 'onColor',\n\t\tlabel: 'Frame Color When Selected',\n\t\tvalue: new Vec3(0.25, 0.25, 0.25)\n\t})\n\t.finish();\n\nfunction isVisible() {\n\tvar layer = thisLayer;\n\twhile(typeof layer !== \"undefined\" && layer != null) {\n\t\tif(!layer.visible) {\n\t\t\treturn false;\n\t\t}\n\t\tlayer = layer.getParent();\n\t}\n\treturn true;\n}\n\nfunction myColor() {\n\treturn WEColor.rgb2hsv(thisLayer.getParent().color);\n}\n\nvar offColor;\nvar selected;\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\toffColor = value;\n\trefresh();\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value - for property 'color'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif(shared['brushEditor']['hasChanged']) {\n\t\trefresh();\n\t}\n\n\treturn selected ? scriptProperties[\"onColor\"] : offColor;\n}\n\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\t// seems like on startup the visibility check doesn't work reliably\n\t// in case the cursor starts on top of the element we don't want to set cursorOnUi\n\tif(!isVisible() || engine.runtime < 1.) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!isVisible()) {return;}\n\tshared[\"cursorOnUi\"] = false;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!isVisible()) {return;}\n\tvar cb = shared.currentBrush;\n\tvar col = myColor();\n\n\tcb.hue = col.x;\n\tcb.saturation = col.y;\n\tcb.value = col.z;\n\n\tshared.brushEditor.changed = true;\n}\n\nexport function refresh() {\n\tvar cb = shared.currentBrush;\n\tvar col = myColor();\n\tselected = (cb.hue === col.x && cb.saturation === col.y && cb.value === col.z);\n}",
				"scriptproperties" : 
				{
					"onColor" : "0.09019607843137255 0.09019607843137255 0.09019607843137255"
				},
				"value" : "0.18824 0.18824 0.18824"
			},
			"id" : 212,
			"image" : "models/ColorBtnFrame@0.5x.json",
			"name" : "ColorBtnFrame@0.5x",
			"parent" : 210,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 246,
			"name" : "Visibility",
			"origin" : "1150.00000 -600.00000 0.00000",
			"parent" : 190
		},
		{
			"alpha" : 0.30000001,
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 230,
			"image" : "models/Hide_small.json",
			"name" : "Hide_small",
			"parent" : 246,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\nvar showVis;\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function init(value) {\n\tvar show = localStorage.get(\"showUi\");\n\tshared[\"showUi\"] = typeof show === 'undefined' ? true : show;\n\tshowVis = thisLayer.getParent().getChildren()[1];\n\tshowVis.visible = shared[\"showUi\"];\n\treturn value;\n}\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn value;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tshared[\"showUi\"] = !shared[\"showUi\"];\n\tlocalStorage.set('showUi', shared['showUi']);\n\tshowVis.visible = shared[\"showUi\"];\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tshared[\"cursorOnUi\"] = false;\n}",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 243,
			"image" : "models/show_small.json",
			"name" : "show_small",
			"parent" : 246,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 263,
			"name" : "Lock",
			"origin" : "975.00000 -600.00000 0.00000",
			"parent" : 190,
			"visible" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\t\n\treturn shared[\"showUi\"];\n}\n",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 260,
			"image" : "models/Unlocked@0.5x.json",
			"name" : "Unlocked@0.5x",
			"parent" : 263,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'key',\n\t\tlabel: 'Property',\n\t\tvalue: 'foo'\n\t})\n\t.addCheckbox({\n\t\tname: 'default',\n\t\tlabel: 'Default Value',\n\t\tvalue: false\n\t})\n\t.addCheckbox({\n\t\tname: 'persistent',\n\t\tlabel: 'Persistent',\n\t\tvalue: true\n\t})\n\t.finish();\n\nvar altIcon;\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function init(value) {\n\tif(scriptProperties[\"persistent\"]) {\n\t\tvar val = localStorage.get(scriptProperties[\"key\"]);\n\t\tshared[scriptProperties[\"key\"]] = typeof val === 'undefined' ? scriptProperties[\"default\"] : val;\n\t}else {\n\t\tshared[scriptProperties[\"key\"]] = scriptProperties[\"default\"];\n\t}\n\taltIcon = thisLayer.getParent().getChildren()[1];\n\taltIcon.visible = shared[scriptProperties[\"key\"]];\n\treturn value;\n}\n\n\n/**\n * @param {Boolean} value - for property 'visible'\n * @return {Boolean} - update current property value\n */\nexport function update(value) {\n\treturn value;\n}\n/**\n * @param {CursorEvent} event\n */\nexport function cursorUp(event) {\n\tif(!shared[\"showUi\"]) {return;}\n\tshared[scriptProperties[\"key\"]] = !shared[scriptProperties[\"key\"]];\n\tif(scriptProperties[\"persistent\"]) {\n\t\tlocalStorage.set(scriptProperties[\"key\"], shared[scriptProperties[\"key\"]]);\n\t}\n\taltIcon.visible = shared[scriptProperties[\"key\"]];\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorEnter(event) {\n\tif(!shared[\"showUi\"]) {return;}\n\tshared[\"cursorOnUi\"] = true;\n}\n\n/**\n * @param {CursorEvent} event\n */\nexport function cursorLeave(event) {\n\tif(!shared[\"showUi\"]) {return;}\n\tshared[\"cursorOnUi\"] = false;\n}\n",
				"scriptproperties" : 
				{
					"default" : false,
					"key" : "locked",
					"persistent" : false
				},
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"id" : 247,
			"image" : "models/Locked@0.5x.json",
			"name" : "Locked@0.5x",
			"parent" : 263,
			"scale" : "0.50000 0.50000 1.00000",
			"size" : "256.00000 256.00000"
		},
		{
			"anchor" : "none",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"castshadow" : false,
			"depthtest" : "enabled",
			"font" : "systemfont_arial",
			"horizontalalign" : "left",
			"id" : 474,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "Tooltip",
			"opaquebackground" : true,
			"origin" : 
			{
				"script" : "'use strict';\n\nvar offset;\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\toffset = value;\n\treturn value;\n}\n\n\n/**\n * @param {Vec3} value (for property 'origin')\n */\nexport function update(value) {\n return input.cursorWorldPosition.add(offset);\n}\n\n",
				"value" : "15.00000 -20.00000 0.00000"
			},
			"padding" : 8,
			"pointsize" : 5.0,
			"size" : "18.00000 18.00000",
			"text" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {String} value - for property 'text'\n * @return {String} - update current property value\n */\nexport function init(value) {\n\tshared[\"tooltip\"] = \"\"\n\treturn \"\";\n}\n\n\n/**\n * @param {String} value - for property 'text'\n * @return {String} - update current property value\n */\nexport function update(value) {\n\tvar tt = shared.tooltip;\n\tshared.tooltip = \"\";\n\treturn tt;\n}",
				"value" : ""
			},
			"verticalalign" : "top"
		}
	],
	"version" : 1
}